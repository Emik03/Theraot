<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Theraot.Core</name>
    </assembly>
    <members>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionaryTheraotExtensions.GetOrAdd``3(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0,System.Func{``0,``2,``1},``2)">
            <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>
            if the key does not already exist.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="valueFactory">The function used to generate a value for the key</param>
            <param name="factoryArgument">An argument value to pass into <paramref name="valueFactory"/>.</param>
            <param name="concurrentDictionary">The concurrentDictionary.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="valueFactory"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.OverflowException">The dictionary contains too many
            elements.</exception>
            <returns>The value for the key.  This will be either the existing value for the key if the
            key is already in the dictionary, or the new value for the key as returned by valueFactory
            if the key was not in the dictionary.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionaryTheraotExtensions.AddOrUpdate``3(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0,System.Func{``0,``2,``1},System.Func{``0,``1,``2,``1},``2)">
            <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> if the key does not already
            exist, or updates a key/value pair in the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> if the key
            already exists.
            </summary>
            <param name="key">The key to be added or whose value should be updated</param>
            <param name="addValueFactory">The function used to generate a value for an absent key</param>
            <param name="updateValueFactory">The function used to generate a new value for an existing key
            based on the key's existing value</param>
            <param name="factoryArgument">An argument to pass into <paramref name="addValueFactory"/> and <paramref name="updateValueFactory"/>.</param>
            <param name="concurrentDictionary">The concurrentDictionary.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="addValueFactory"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="updateValueFactory"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.OverflowException">The dictionary contains too many
            elements.</exception>
            <returns>The new value for the key.  This will be either be the result of addValueFactory (if the key was
            absent) or the result of updateValueFactory (if the key was present).</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionaryTheraotExtensions.TryRemove``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},System.Collections.Generic.KeyValuePair{``0,``1})">
            <summary>Removes a key and value from the dictionary.</summary>
            <param name="item">The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> representing the key and value to remove.</param>
            <param name="concurrentDictionary">The concurrentDictionary.</param>
            <returns>
            true if the key and value represented by <paramref name="item"/> are successfully
            found and removed; otherwise, false.
            </returns>
            <remarks>
            Both the specified key and value must match the entry in the dictionary for it to be removed.
            The key is compared using the dictionary's comparer (or the default comparer for <typeparamref name="TKey"/>
            if no comparer was provided to the dictionary when it was constructed).  The value is compared using the
            default comparer for <typeparamref name="TValue"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> property of <paramref name="item"/> is a null reference.
            </exception>
        </member>
        <member name="T:System.Collections.Generic.ComparerEx">
            <summary>
            Defines the <see cref="T:System.Collections.Generic.ComparerEx" />
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ComparerEx.Create``1(System.Comparison{``0})">
            <summary>
            Creates a comparer by using the specified comparison.
            </summary>
            <typeparam name="T">The type of items compared.</typeparam>
            <param name="comparison">The comparison<see cref="T:System.Comparison`1"/></param>
            <returns>The new <see cref="T:System.Collections.Generic.Comparer`1"/>.</returns>
        </member>
        <member name="T:System.Collections.Generic.IAsyncEnumerable`1">
            <summary>Exposes an enumerator that provides asynchronous iteration over values of a specified type.</summary>
            <typeparam name="T">The type of values to enumerate.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)">
            <summary>Returns an enumerator that iterates asynchronously through the collection.</summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that may be used to cancel the asynchronous iteration.</param>
            <returns>An enumerator that can be used to iterate asynchronously through the collection.</returns>
        </member>
        <member name="T:System.Collections.Generic.IAsyncEnumerator`1">
            <summary>Supports a simple asynchronous iteration over a generic collection.</summary>
            <typeparam name="T">The type of objects to enumerate.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.IAsyncEnumerator`1.Current">
            <summary>Gets the element in the collection at the current position of the enumerator.</summary>
        </member>
        <member name="M:System.Collections.Generic.IAsyncEnumerator`1.MoveNextAsync">
            <summary>Advances the enumerator asynchronously to the next element of the collection.</summary>
            <returns>
            A <see cref="!:ValueTask&lt;bool&gt;" /> that will complete with a result of <c>true</c> if the enumerator
            was successfully advanced to the next element, or <c>false</c> if the enumerator has passed the end
            of the collection.
            </returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute">
            <summary>
            Indicates that certain members on a specified <see cref="T:System.Type"/> are accessed dynamically,
            for example through <see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
            <para>
            This allows tools to understand which members are being accessed during the execution
            of a program.
            </para>
            <para>This attribute is valid on members whose type is <see cref="T:System.Type"/> or <see cref="T:System.String"/>.</para>
            <para>
            When this attribute is applied to a location of type <see cref="T:System.String"/>, the assumption is
            that the string represents a fully qualified type name.
            </para>
            <para>
            If the attribute is applied to a method it's treated as a special case and it implies
            the attribute should be applied to the "this" parameter of the method. As such the attribute
            should only be used on instance methods of types assignable to System.Type (or string, but no methods
            will use it there).
            </para>
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute"/> class
            with the specified member types.
            </summary>
            <param name="memberTypes">The types of members dynamically accessed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes"/> which specifies the type
            of members dynamically accessed.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes">
            <summary>
            <para>Specifies the types of members that are dynamically accessed.</para>
            <para>
            This enumeration has a <see cref="T:System.FlagsAttribute"/> attribute that allows a
            bitwise combination of its member values.
            </para>
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None">
            <summary>
            Specifies no members.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor">
            <summary>
            Specifies the default, parameterless public constructor.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors">
            <summary>
            Specifies all public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicConstructors">
            <summary>
            Specifies all non-public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicMethods">
            <summary>
            Specifies all public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicMethods">
            <summary>
            Specifies all non-public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields">
            <summary>
            Specifies all public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicFields">
            <summary>
            Specifies all non-public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicNestedTypes">
            <summary>
            Specifies all public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicNestedTypes">
            <summary>
            Specifies all non-public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties">
            <summary>
            Specifies all public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicProperties">
            <summary>
            Specifies all non-public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicEvents">
            <summary>
            Specifies all public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicEvents">
            <summary>
            Specifies all non-public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.Interfaces">
            <summary>
            Specifies all interfaces implemented by the type.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.All">
            <summary>
            Specifies all members.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute">
            <summary>
            States a dependency that one member has on another.
            </summary>
            <remarks>
            This can be used to inform tooling of a dependency that is otherwise not evident purely from
            metadata and IL, for example a member relied on via reflection.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on the same type as the consumer.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on a <see cref="T:System.Type"/>.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
            <param name="type">The <see cref="T:System.Type"/> containing <paramref name="memberSignature"/>.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on a type in an assembly.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
            <param name="typeName">The full name of the type containing the specified member.</param>
            <param name="assemblyName">The assembly name of the type containing the specified member.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified types of members on a <see cref="T:System.Type"/>.
            </summary>
            <param name="memberTypes">The types of members depended on.</param>
            <param name="type">The <see cref="T:System.Type"/> containing the specified members.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified types of members on a type in an assembly.
            </summary>
            <param name="memberTypes">The types of members depended on.</param>
            <param name="typeName">The full name of the type containing the specified members.</param>
            <param name="assemblyName">The assembly name of the type containing the specified members.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName">
            <summary>
            Gets the assembly name of the specified type.
            </summary>
            <remarks>
            <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName"/> is only valid when <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName"/> is specified.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Condition">
            <summary>
            Gets or sets the condition in which the dependency is applicable, e.g. "DEBUG".
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature">
            <summary>
            Gets the signature of the member depended on.
            </summary>
            <remarks>
            Either <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature"/> must be a valid string or <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes"/>
            must not equal <see cref="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None"/>, but not both.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes"/> which specifies the type
            of members depended on.
            </summary>
            <remarks>
            Either <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature"/> must be a valid string or <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes"/>
            must not equal <see cref="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None"/>, but not both.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type">
            <summary>
            Gets the <see cref="T:System.Type"/> containing the specified member.
            </summary>
            <remarks>
            If neither <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type"/> nor <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName"/> are specified,
            the type of the consumer is assumed.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName">
            <summary>
            Gets the full name of the type containing the specified member.
            </summary>
            <remarks>
            If neither <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type"/> nor <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName"/> are specified,
            the type of the consumer is assumed.
            </remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute">
            <summary>
            Indicates that the specified method requires dynamic access to code that is not referenced
            statically, for example through <see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when removing unreferenced
            code from an application.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of unreferenced code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of unreferenced code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires unreferenced code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute">
            <summary>
            Suppresses reporting of a specific rule violation, allowing multiple suppressions on a
            single code artifact.
            </summary>
            <remarks>
            <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/> is different than
            <see cref="T:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"/> in that it doesn't have a
            <see cref="T:System.Diagnostics.ConditionalAttribute"/>. So it is always preserved in the compiled assembly.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/>
            class, specifying the category of the tool and the identifier for an analysis rule.
            </summary>
            <param name="category">The category for the attribute.</param>
            <param name="checkId">The identifier of the analysis rule the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category">
            <summary>
            Gets the category identifying the classification of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category"/> property describes the tool or tool analysis category
            for which a message suppression attribute applies.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId">
            <summary>
            Gets the identifier of the analysis tool rule to be suppressed.
            </summary>
            <remarks>
            Concatenated together, the <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category"/> and <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId"/>
            properties form a unique check identifier.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Justification">
            <summary>
            Gets or sets the justification for suppressing the code analysis message.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId">
            <summary>
            Gets or sets an optional argument expanding on exclusion criteria.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId"/> property is an optional argument that specifies additional
            exclusion where the literal metadata target is not sufficiently precise. For example,
            the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/> cannot be applied within a method,
            and it may be desirable to suppress a violation against a statement in the method that will
            give a rule violation, but not against all statements in the method.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Scope">
            <summary>
            Gets or sets the scope of the code that is relevant for the attribute.
            </summary>
            <remarks>
            The Scope property is an optional argument that specifies the metadata scope for which
            the attribute is relevant.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target">
            <summary>
            Gets or sets a fully qualified path that represents the target of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target"/> property is an optional argument identifying the analysis target
            of the attribute. An example value is "System.IO.Stream.ctor():System.Void".
            Because it is fully qualified, it can be long, particularly for targets such as parameters.
            The analysis tool user interface should be capable of automatically formatting the parameter.
            </remarks>
        </member>
        <member name="T:System.IAsyncDisposable">
            <summary>Provides a mechanism for releasing unmanaged resources asynchronously.</summary>
        </member>
        <member name="M:System.IAsyncDisposable.DisposeAsync">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources asynchronously.
            </summary>
        </member>
        <member name="T:System.Numerics.BitOperations">
            <summary>
            Utility methods for intrinsic bit-twiddling operations.
            The methods use hardware intrinsics when available on the underlying platform,
            otherwise they use optimized software fallbacks.
            </summary>
        </member>
        <member name="M:System.Numerics.BitOperations.LeadingZeroCount(System.UInt32)">
            <summary>
            Count the number of leading zero bits in a mask.
            Similar in behavior to the x86 instruction LZCNT.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.Numerics.BitOperations.LeadingZeroCount(System.UInt64)">
            <summary>
            Count the number of leading zero bits in a mask.
            Similar in behavior to the x86 instruction LZCNT.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.Numerics.BitOperations.Log2(System.UInt32)">
            <summary>
            Returns the integer (floor) log of the specified value, base 2.
            Note that by convention, input value 0 returns 0 since Log(0) is undefined.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.Numerics.BitOperations.Log2(System.UInt64)">
            <summary>
            Returns the integer (floor) log of the specified value, base 2.
            Note that by convention, input value 0 returns 0 since Log(0) is undefined.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.Numerics.BitOperations.PopCount(System.UInt32)">
            <summary>
            Returns the population count (number of bits set) of a mask.
            Similar in behavior to the x86 instruction POPCNT.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.Numerics.BitOperations.PopCount(System.UInt64)">
            <summary>
            Returns the population count (number of bits set) of a mask.
            Similar in behavior to the x86 instruction POPCNT.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.Numerics.BitOperations.RotateLeft(System.UInt32,System.Int32)">
            <summary>
            Rotates the specified value left by the specified number of bits.
            Similar in behavior to the x86 instruction ROL.
            </summary>
            <param name="value">The value to rotate.</param>
            <param name="offset">The number of bits to rotate by.
            Any value outside the range [0..31] is treated as congruent mod 32.</param>
            <returns>The rotated value.</returns>
        </member>
        <member name="M:System.Numerics.BitOperations.RotateLeft(System.UInt64,System.Int32)">
            <summary>
            Rotates the specified value left by the specified number of bits.
            Similar in behavior to the x86 instruction ROL.
            </summary>
            <param name="value">The value to rotate.</param>
            <param name="offset">The number of bits to rotate by.
            Any value outside the range [0..63] is treated as congruent mod 64.</param>
            <returns>The rotated value.</returns>
        </member>
        <member name="M:System.Numerics.BitOperations.RotateRight(System.UInt32,System.Int32)">
            <summary>
            Rotates the specified value right by the specified number of bits.
            Similar in behavior to the x86 instruction ROR.
            </summary>
            <param name="value">The value to rotate.</param>
            <param name="offset">The number of bits to rotate by.
            Any value outside the range [0..31] is treated as congruent mod 32.</param>
            <returns>The rotated value.</returns>
        </member>
        <member name="M:System.Numerics.BitOperations.RotateRight(System.UInt64,System.Int32)">
            <summary>
            Rotates the specified value right by the specified number of bits.
            Similar in behavior to the x86 instruction ROR.
            </summary>
            <param name="value">The value to rotate.</param>
            <param name="offset">The number of bits to rotate by.
            Any value outside the range [0..63] is treated as congruent mod 64.</param>
            <returns>The rotated value.</returns>
        </member>
        <member name="M:System.Numerics.BitOperations.TrailingZeroCount(System.Int32)">
            <summary>
            Count the number of trailing zero bits in an integer value.
            Similar in behavior to the x86 instruction TZCNT.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.Numerics.BitOperations.TrailingZeroCount(System.UInt32)">
            <summary>
            Count the number of trailing zero bits in an integer value.
            Similar in behavior to the x86 instruction TZCNT.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.Numerics.BitOperations.TrailingZeroCount(System.Int64)">
            <summary>
            Count the number of trailing zero bits in a mask.
            Similar in behavior to the x86 instruction TZCNT.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.Numerics.BitOperations.TrailingZeroCount(System.UInt64)">
            <summary>
            Count the number of trailing zero bits in a mask.
            Similar in behavior to the x86 instruction TZCNT.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder">
            <summary>Represents a builder for asynchronous iterators.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.Create">
            <summary>Creates an instance of the <see cref="T:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder"/> struct.</summary>
            <returns>The initialized instance.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.MoveNext``1(``0@)">
            <summary>Invokes <see cref="M:System.Runtime.CompilerServices.IAsyncStateMachine.MoveNext"/> on the state machine.</summary>
            <typeparam name="TStateMachine">The type of the state machine.</typeparam>
            <param name="stateMachine">The state machine instance, passed by reference.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
            <summary>Schedules the state machine to proceed to the next action when the specified awaiter completes.</summary>
            <typeparam name="TAwaiter">The type of the awaiter.</typeparam>
            <typeparam name="TStateMachine">The type of the state machine.</typeparam>
            <param name="awaiter">The awaiter.</param>
            <param name="stateMachine">The state machine.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
            <summary>Schedules the state machine to proceed to the next action when the specified awaiter completes.</summary>
            <typeparam name="TAwaiter">The type of the awaiter.</typeparam>
            <typeparam name="TStateMachine">The type of the state machine.</typeparam>
            <param name="awaiter">The awaiter.</param>
            <param name="stateMachine">The state machine.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.Complete">
            <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncIteratorStateMachineAttribute">
            <summary>Indicates whether a method is an asynchronous iterator.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncIteratorStateMachineAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.AsyncIteratorStateMachineAttribute" /> class.</summary>
            <param name="stateMachineType">The type object for the underlying state machine type that's used to implement a state machine method.</param>
        </member>
        <member name="T:System.Runtime.CompilerServices.ConfiguredAsyncDisposable">
            <summary>Provides a type that can be used to configure how awaits on an <see cref="T:System.IAsyncDisposable"/> are performed.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1">
            <summary>Provides an awaitable async enumerable that enables cancelable iteration and configured awaits.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.ConfigureAwait(System.Boolean)">
            <summary>Configures how awaits on the tasks returned from an async iteration will be performed.</summary>
            <param name="continueOnCapturedContext">Whether to capture and marshal back to the current context.</param>
            <returns>The configured enumerable.</returns>
            <remarks>This will replace any previous value set by <see cref="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.ConfigureAwait(System.Boolean)"/> for this iteration.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.WithCancellation(System.Threading.CancellationToken)">
            <summary>Sets the <see cref="T:System.Threading.CancellationToken"/> to be passed to <see cref="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)"/> when iterating.</summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to use.</param>
            <returns>The configured enumerable.</returns>
            <remarks>This will replace any previous <see cref="T:System.Threading.CancellationToken"/> set by <see cref="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.WithCancellation(System.Threading.CancellationToken)"/> for this iteration.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator">
            <summary>Provides an awaitable async enumerator that enables cancelable iteration and configured awaits.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator.MoveNextAsync">
            <summary>Advances the enumerator asynchronously to the next element of the collection.</summary>
            <returns>
            A <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1"/> that will complete with a result of <c>true</c>
            if the enumerator was successfully advanced to the next element, or <c>false</c> if the enumerator has
            passed the end of the collection.
            </returns>
        </member>
        <member name="P:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator.Current">
            <summary>Gets the element in the collection at the current position of the enumerator.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator.DisposeAsync">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources asynchronously.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsReadOnlyAttribute">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This attribute should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SwitchExpressionException">
            <summary>
            Indicates that a switch expression that was non-exhaustive failed to match its input
            at runtime, e.g. in the C# 8 expression
            <code>
            3 switch { 4 => 5 }
            </code>.
            The exception optionally contains an object representing the unmatched value.
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1">
            <summary>Provides the core logic for implementing a manual-reset <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource"/> or <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource`1"/>.</summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="F:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1._continuation">
            <summary>
            The callback to invoke when the operation completes if <see cref="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.OnCompleted(System.Action{System.Object},System.Object,System.Int16,System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags)"/> was called before the operation completed,
            or <see cref="F:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore.Sentinel"/> if the operation completed before a callback was supplied,
            or null if a callback hasn't yet been provided and the operation hasn't yet completed.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1._continuationState">
            <summary>State to pass to <see cref="F:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1._continuation"/>.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1._executionContext">
            <summary><see cref="T:System.Threading.ExecutionContext"/> to flow to the callback, or null if no flowing is required.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1._capturedContext">
            <summary>
            A "captured" <see cref="T:System.Threading.SynchronizationContext"/> or <see cref="T:System.Threading.Tasks.TaskScheduler"/> with which to invoke the callback,
            or null if no special context is required.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1._result">
            <summary>The result with which the operation succeeded, or the default value if it hasn't yet completed or failed.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.RunContinuationsAsynchronously">
            <summary>Gets or sets whether to force continuations to run asynchronously.</summary>
            <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.Reset">
            <summary>Resets to prepare for the next operation.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.SetResult(`0)">
            <summary>Completes with a successful result.</summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.SetException(System.Exception)">
            <summary>Completes with an error.</summary>
            <param name="error">The exception.</param>
        </member>
        <member name="P:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.Version">
            <summary>Gets the operation version.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.GetStatus(System.Int16)">
            <summary>Gets the status of the operation.</summary>
            <param name="token">Opaque value that was provided to the <see cref="T:System.Threading.Tasks.ValueTask"/>'s constructor.</param>
        </member>
        <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.GetResult(System.Int16)">
            <summary>Gets the result of the operation.</summary>
            <param name="token">Opaque value that was provided to the <see cref="T:System.Threading.Tasks.ValueTask"/>'s constructor.</param>
        </member>
        <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.OnCompleted(System.Action{System.Object},System.Object,System.Int16,System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags)">
            <summary>Schedules the continuation action for this operation.</summary>
            <param name="continuation">The continuation to invoke when the operation has completed.</param>
            <param name="state">The state object to pass to <paramref name="continuation"/> when it's invoked.</param>
            <param name="token">Opaque value that was provided to the <see cref="T:System.Threading.Tasks.ValueTask"/>'s constructor.</param>
            <param name="flags">The flags describing the behavior of the continuation.</param>
        </member>
        <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.ValidateToken(System.Int16)">
            <summary>Ensures that the specified token matches the current version.</summary>
            <param name="token">The token supplied by <see cref="T:System.Threading.Tasks.ValueTask"/>.</param>
        </member>
        <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.SignalCompletion">
            <summary>Signals that the operation has completed.  Invoked after the result or error has been set.</summary>
        </member>
        <member name="T:System.Threading.Tasks.TaskAsyncEnumerableExtensions">
            <summary>Provides a set of static methods for configuring <see cref="T:System.Threading.Tasks.Task" />-related behaviors on asynchronous enumerables and disposables.</summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.ConfigureAwait(System.IAsyncDisposable,System.Boolean)">
            <summary>Configures how awaits on the tasks returned from an async disposable will be performed.</summary>
            <param name="source">The source async disposable.</param>
            <param name="continueOnCapturedContext">Whether to capture and marshal back to the current context.</param>
            <returns>The configured async disposable.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.ConfigureAwait``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Boolean)">
            <summary>Configures how awaits on the tasks returned from an async iteration will be performed.</summary>
            <typeparam name="T">The type of the objects being iterated.</typeparam>
            <param name="source">The source enumerable being iterated.</param>
            <param name="continueOnCapturedContext">Whether to capture and marshal back to the current context.</param>
            <returns>The configured enumerable.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.WithCancellation``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>Sets the <see cref="T:System.Threading.CancellationToken" /> to be passed to <see cref="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)" /> when iterating.</summary>
            <typeparam name="T">The type of the objects being iterated.</typeparam>
            <param name="source">The source enumerable being iterated.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to use.</param>
            <returns>The configured enumerable.</returns>
        </member>
        <member name="T:System.Threading.Tasks.TaskEx">
            <summary>
                Provides methods for creating and manipulating tasks.
            </summary>
            <remarks>
                TaskEx is a placeholder.
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.FromResult``1(``0)">
            <summary>
                Creates an already completed <see cref="T:System.Threading.Tasks.Task`1" /> from the specified result.
            </summary>
            <param name="result">The result from which to create the completed task.</param>
            <returns>
                The completed task.
            </returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.Run(System.Action)">
            <summary>
                Creates a task that runs the specified action.
            </summary>
            <param name="action">The action to execute asynchronously.</param>
            <returns>
                A task that represents the completion of the action.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> argument is null.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.Run(System.Action,System.Threading.CancellationToken)">
            <summary>
                Creates a task that runs the specified action.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="cancellationToken">The CancellationToken to use to request cancellation of this task.</param>
            <returns>
                A task that represents the completion of the action.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> argument is null.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.Run``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
                Creates a task that runs the specified function.
            </summary>
            <param name="function">The function to execute asynchronously.</param>
            <returns>
                A task that represents the completion of the action.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is null.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
                Creates a task that runs the specified function.
            </summary>
            <param name="function">The action to execute.</param>
            <param name="cancellationToken">The CancellationToken to use to cancel the task.</param>
            <returns>
                A task that represents the completion of the action.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is null.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.Run(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Creates a task that runs the specified function.
            </summary>
            <param name="function">The action to execute asynchronously.</param>
            <returns>
                A task that represents the completion of the action.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is null.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
                Creates a task that runs the specified function.
            </summary>
            <param name="function">The function to execute.</param>
            <param name="cancellationToken">The CancellationToken to use to request cancellation of this task.</param>
            <returns>
                A task that represents the completion of the function.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is null.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.Run``1(System.Func{``0})">
            <summary>
                Creates a task that runs the specified function.
            </summary>
            <param name="function">The function to execute asynchronously.</param>
            <returns>
                A task that represents the completion of the action.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is null.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.Run``1(System.Func{``0},System.Threading.CancellationToken)">
            <summary>
                Creates a task that runs the specified function.
            </summary>
            <param name="function">The action to execute.</param>
            <param name="cancellationToken">The CancellationToken to use to cancel the task.</param>
            <returns>
                A task that represents the completion of the action.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is null.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
                Creates a Task that will complete when any of the tasks in the provided collection completes.
            </summary>
            <param name="tasks">The Tasks to be monitored.</param>
            <returns>
                A Task that represents the completion of any of the provided Tasks.  The completed Task is this Task's result.
            </returns>
            <remarks>
                Any Tasks that fault will need to have their exceptions observed elsewhere.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> argument contains a null reference.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
                Creates a Task that will complete when any of the tasks in the provided collection completes.
            </summary>
            <param name="tasks">The Tasks to be monitored.</param>
            <returns>
                A Task that represents the completion of any of the provided Tasks.  The completed Task is this Task's result.
            </returns>
            <remarks>
                Any Tasks that fault will need to have their exceptions observed elsewhere.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> argument contains a null reference.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.WhenAny(System.Threading.Tasks.Task[])">
            <summary>
                Creates a Task that will complete when any of the tasks in the provided collection completes.
            </summary>
            <param name="tasks">The Tasks to be monitored.</param>
            <returns>
                A Task that represents the completion of any of the provided Tasks.  The completed Task is this Task's result.
            </returns>
            <remarks>
                Any Tasks that fault will need to have their exceptions observed elsewhere.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> argument contains a null reference.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.WhenAny``1(System.Threading.Tasks.Task{``0}[])">
            <summary>
                Creates a Task that will complete when any of the tasks in the provided collection completes.
            </summary>
            <param name="tasks">The Tasks to be monitored.</param>
            <returns>
                A Task that represents the completion of any of the provided Tasks.  The completed Task is this Task's result.
            </returns>
            <remarks>
                Any Tasks that fault will need to have their exceptions observed elsewhere.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> argument contains a null reference.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.Yield">
            <summary>
                Creates an awaitable that asynchronously yields back to the current context when awaited.
            </summary>
            <returns>
                A context that, when awaited, will asynchronously transition back into the current context.
                If SynchronizationContext.Current is non-null, that is treated as the current context.
                Otherwise, TaskScheduler.Current is treated as the current context.
            </returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.Delay(System.Int32)">
            <summary>
                Starts a Task that will complete after the specified due time.
            </summary>
            <param name="millisecondsDelay">The delay in milliseconds before the returned task completes.</param>
            <returns>
                The timed Task.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                The <paramref name="millisecondsDelay" /> argument must be non-negative or -1 and less than or equal to Int32.MaxValue.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.Delay(System.Int32,System.Threading.CancellationToken)">
            <summary>
                Starts a Task that will complete after the specified due time.
            </summary>
            <param name="millisecondsDelay">The delay in milliseconds before the returned task completes.</param>
            <param name="cancellationToken">A CancellationToken that may be used to cancel the task before the due time occurs.</param>
            <returns>
                The timed Task.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                The <paramref name="millisecondsDelay" /> argument must be non-negative or -1 and less than or equal to Int32.MaxValue.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.Delay(System.TimeSpan)">
            <summary>
                Starts a Task that will complete after the specified due time.
            </summary>
            <param name="millisecondsDelay">The delay before the returned task completes.</param>
            <returns>
                The timed Task.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                The <paramref name="millisecondsDelay" /> argument must be non-negative or -1 and less than or equal to Int32.MaxValue.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.Delay(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
                Starts a Task that will complete after the specified due time.
            </summary>
            <param name="millisecondsDelay">The delay before the returned task completes.</param>
            <param name="cancellationToken">A CancellationToken that may be used to cancel the task before the due time occurs.</param>
            <returns>
                The timed Task.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                The <paramref name="millisecondsDelay" /> argument must be non-negative or -1 and less than or equal to Int32.MaxValue.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.WhenAll(System.Threading.Tasks.Task[])">
            <summary>
                Creates a Task that will complete only when all of the provided collection of Tasks has completed.
            </summary>
            <param name="tasks">The Tasks to monitor for completion.</param>
            <returns>
                A Task that represents the completion of all of the provided tasks.
            </returns>
            <remarks>
                If any of the provided Tasks faults, the returned Task will also fault, and its Exception will contain information
                about all of the faulted tasks.  If no Tasks fault but one or more Tasks is canceled, the returned
                Task will also be canceled.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> argument contains a null reference.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.WhenAll``1(System.Threading.Tasks.Task{``0}[])">
            <summary>
                Creates a Task that will complete only when all of the provided collection of Tasks has completed.
            </summary>
            <param name="tasks">The Tasks to monitor for completion.</param>
            <returns>
                A Task that represents the completion of all of the provided tasks.
            </returns>
            <remarks>
                If any of the provided Tasks faults, the returned Task will also fault, and its Exception will contain information
                about all of the faulted tasks.  If no Tasks fault but one or more Tasks is canceled, the returned
                Task will also be canceled.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> argument contains a null reference.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
                Creates a Task that will complete only when all of the provided collection of Tasks has completed.
            </summary>
            <param name="tasks">The Tasks to monitor for completion.</param>
            <returns>
                A Task that represents the completion of all of the provided tasks.
            </returns>
            <remarks>
                If any of the provided Tasks faults, the returned Task will also fault, and its Exception will contain information
                about all of the faulted tasks.  If no Tasks fault but one or more Tasks is canceled, the returned
                Task will also be canceled.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> argument contains a null reference.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
                Creates a Task that will complete only when all of the provided collection of Tasks has completed.
            </summary>
            <param name="tasks">The Tasks to monitor for completion.</param>
            <returns>
                A Task that represents the completion of all of the provided tasks.
            </returns>
            <remarks>
                If any of the provided Tasks faults, the returned Task will also fault, and its Exception will contain information
                about all of the faulted tasks.  If no Tasks fault but one or more Tasks is canceled, the returned
                Task will also be canceled.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> argument contains a null reference.</exception>
        </member>
        <member name="T:System.Threading.Tasks.TaskExEx">
            <summary>
                Provides methods for creating and manipulating tasks.
            </summary>
            <remarks>
                TaskEx is a placeholder.
            </remarks>
            <summary>
                Provides methods for creating and manipulating tasks.
            </summary>
            <remarks>
                TaskEx is a placeholder.
            </remarks>
        </member>
        <member name="P:System.Threading.Tasks.TaskExEx.CompletedTask">
            <summary>Gets a task that's already been completed successfully.</summary>
            <remarks>May not always return the same instance.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskExEx.FromResult``1(``0)">
            <summary>
                Creates an already completed <see cref="T:System.Threading.Tasks.Task`1" /> from the specified result.
            </summary>
            <param name="result">The result from which to create the completed task.</param>
            <returns>
                The completed task.
            </returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskExEx.Yield">
            <summary>
                Creates an awaitable that asynchronously yields back to the current context when awaited.
            </summary>
            <returns>
                A context that, when awaited, will asynchronously transition back into the current context.
                If SynchronizationContext.Current is non-null, that is treated as the current context.
                Otherwise, TaskScheduler.Current is treated as the current context.
            </returns>
        </member>
        <member name="M:System.Threading.Tasks.ValueTaskEx.FromCanceled(System.Threading.CancellationToken)">
            <summary>Creates a <see cref="T:System.Threading.Tasks.ValueTask"/> that has completed due to cancellation with the specified cancellation token.</summary>
            <param name="cancellationToken">The cancellation token with which to complete the task.</param>
            <returns>The canceled task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.ValueTaskEx.FromCanceled``1(System.Threading.CancellationToken)">
            <summary>Creates a <see cref="T:System.Threading.Tasks.ValueTask`1"/> that has completed due to cancellation with the specified cancellation token.</summary>
            <param name="cancellationToken">The cancellation token with which to complete the task.</param>
            <returns>The canceled task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.ValueTaskEx.FromException(System.Exception)">
            <summary>Creates a <see cref="T:System.Threading.Tasks.ValueTask"/> that has completed with the specified exception.</summary>
            <param name="exception">The exception with which to complete the task.</param>
            <returns>The faulted task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.ValueTaskEx.FromException``1(System.Exception)">
            <summary>Creates a <see cref="T:System.Threading.Tasks.ValueTask`1"/> that has completed with the specified exception.</summary>
            <param name="exception">The exception with which to complete the task.</param>
            <returns>The faulted task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.ValueTaskEx.FromResult``1(``0)">
            <summary>Creates a <see cref="T:System.Threading.Tasks.ValueTask`1"/> that's completed successfully with the specified result.</summary>
            <typeparam name="TResult">The type of the result returned by the task.</typeparam>
            <param name="result">The result to store into the completed task.</param>
            <returns>The successfully completed task.</returns>
        </member>
        <member name="T:Theraot.Collections.ThreadSafe.Bucket`1">
            <summary>
                Represent a thread-safe wait-free bucket.
            </summary>
            <typeparam name="T">The type of the item.</typeparam>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.BucketHelper.InsertOrUpdate``1(Theraot.Collections.ThreadSafe.IBucket{``0},System.Int32,System.Func{``0},System.Func{``0,``0},System.Boolean@)">
            <summary>
                Inserts or replaces the item at the specified index.
            </summary>
            <param name="bucket">The bucket on which to operate.</param>
            <param name="index">The index.</param>
            <param name="itemFactory">The item factory to create the item to insert.</param>
            <param name="itemUpdateFactory">The item factory to create the item to replace with.</param>
            <param name="isNew">if set to <c>true</c> the index was not previously used.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index;index must be greater or equal to 0 and less than capacity</exception>
            <remarks>
                The operation will be attempted as long as check returns true - this operation may starve.
            </remarks>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.BucketHelper.InsertOrUpdateChecked``1(Theraot.Collections.ThreadSafe.IBucket{``0},System.Int32,System.Func{``0},System.Func{``0,``0},System.Predicate{``0},System.Boolean@)">
            <summary>
                Inserts or replaces the item at the specified index.
            </summary>
            <param name="bucket">The bucket on which to operate.</param>
            <param name="index">The index.</param>
            <param name="itemFactory">The item factory to create the item to insert.</param>
            <param name="itemUpdateFactory">The item factory to create the item to replace with.</param>
            <param name="check">A predicate to decide if a particular item should be replaced.</param>
            <param name="isNew">if set to <c>true</c> the index was not previously used.</param>
            <returns>
                <c>true</c> if the item or replaced inserted; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index;index must be greater or equal to 0 and less than capacity</exception>
            <remarks>
                The operation will be attempted as long as check returns true - this operation may starve.
            </remarks>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.BucketHelper.InsertOrUpdateChecked``1(Theraot.Collections.ThreadSafe.IBucket{``0},System.Int32,``0,System.Func{``0,``0},System.Predicate{``0},System.Boolean@)">
            <summary>
                Inserts or replaces the item at the specified index.
            </summary>
            <param name="bucket">The bucket on which to operate.</param>
            <param name="index">The index.</param>
            <param name="item">The item insert.</param>
            <param name="itemUpdateFactory">The item factory to create the item to replace with.</param>
            <param name="check">A predicate to decide if a particular item should be replaced.</param>
            <param name="isNew">if set to <c>true</c> the index was not previously used.</param>
            <returns>
                <c>true</c> if the item or replaced inserted; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index;index must be greater or equal to 0 and less than capacity</exception>
            <remarks>
                The operation will be attempted as long as check returns true - this operation may starve.
            </remarks>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.BucketHelper.InsertOrUpdateChecked``1(Theraot.Collections.ThreadSafe.IBucket{``0},System.Int32,``0,System.Predicate{``0},System.Boolean@)">
            <summary>
                Inserts or replaces the item at the specified index.
            </summary>
            <param name="bucket">The bucket on which to operate.</param>
            <param name="index">The index.</param>
            <param name="item">The item set.</param>
            <param name="check">A predicate to decide if a particular item should be replaced.</param>
            <param name="isNew">if set to <c>true</c> the index was not previously used.</param>
            <returns>
                <c>true</c> if the item or replaced inserted; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index;index must be greater or equal to 0 and less than capacity</exception>
            <remarks>
                The operation will be attempted as long as check returns true - this operation may starve.
            </remarks>
        </member>
        <member name="T:Theraot.Collections.ThreadSafe.CacheDict`2">
            <summary>
                Provides a dictionary-like object used for caches which holds onto a maximum
                number of elements specified at construction time.
            </summary>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.CacheDict`2.#ctor(System.Func{`0,`1},System.Int32)">
            <summary>
                Creates a dictionary-like object used for caches.
            </summary>
            <param name="capacity">The maximum number of elements to store will be this number aligned to next ^2.</param>
        </member>
        <member name="P:Theraot.Collections.ThreadSafe.CacheDict`2.Item(`0)">
            <summary>
                Gets or sets the value associated with the given key.
            </summary>
        </member>
        <member name="T:Theraot.Collections.ThreadSafe.CircularBucket`1">
            <summary>
                Represents a thread-safe wait-free fixed size circular bucket.
            </summary>
            <typeparam name="T">The type of the item.</typeparam>
            <remarks>
                The items added an instance of this type will be overwritten after the entry point reaches the end of the bucket.
                This class was created for the purpose of storing in-memory logs for debugging threaded software.
            </remarks>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.CircularBucket`1.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Theraot.Collections.ThreadSafe.CircularBucket`1" /> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="P:Theraot.Collections.ThreadSafe.CircularBucket`1.Capacity">
            <summary>
                Gets the capacity.
            </summary>
        </member>
        <member name="P:Theraot.Collections.ThreadSafe.CircularBucket`1.Count">
            <summary>
                Gets the number of items that has been added.
            </summary>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.CircularBucket`1.Add(`0)">
            <summary>
                Adds the specified item. May overwrite an existing item.
            </summary>
            <param name="item">The item.</param>
            <returns>Returns the position where the item was added.</returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.CircularBucket`1.GetEnumerator">
            <summary>
                Returns an <see cref="T:System.Collections.Generic.IEnumerator`1" /> that allows to iterate through the collection.
            </summary>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.CircularBucket`1.RemoveAt(System.Int32)">
            <summary>
                Removes the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>
                <c>true</c> if the item was removed; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index;index must be greater or equal to 0 and less than capacity</exception>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.CircularBucket`1.RemoveAt(System.Int32,`0@)">
            <summary>
                Removes the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="previous">The previous item in the specified index.</param>
            <returns>
                <c>true</c> if the item was removed; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index;index must be greater or equal to 0 and less than capacity</exception>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.CircularBucket`1.TryGet(System.Int32,`0@)">
            <summary>
                Tries to retrieve the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
            <returns>
                <c>true</c> if the item was retrieved; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index;index must be greater or equal to 0 and less than capacity</exception>
        </member>
        <member name="T:Theraot.Collections.ThreadSafe.FixedSizeBucket`1">
            <summary>
                Represent a thread-safe wait-free fixed size bucket.
            </summary>
            <typeparam name="T">The type of the item.</typeparam>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.FixedSizeBucket`1.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Theraot.Collections.ThreadSafe.FixedSizeBucket`1" /> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.FixedSizeBucket`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Theraot.Collections.ThreadSafe.FixedSizeBucket`1" /> class.
            </summary>
        </member>
        <member name="P:Theraot.Collections.ThreadSafe.FixedSizeBucket`1.Capacity">
            <summary>
                Gets the capacity.
            </summary>
        </member>
        <member name="P:Theraot.Collections.ThreadSafe.FixedSizeBucket`1.Count">
            <summary>
                Gets the number of items actually contained.
            </summary>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.FixedSizeBucket`1.CopyTo(`0[],System.Int32)">
            <summary>
                Copies the items to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
            <exception cref="T:System.ArgumentNullException">array</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex;Non-negative number is required.</exception>
            <exception cref="T:System.ArgumentException">array;The array can not contain the number of elements.</exception>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.FixedSizeBucket`1.Exchange(System.Int32,`0,`0@)">
            <summary>
                Sets the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
            <param name="previous">The previous item in the specified index.</param>
            <returns>
                <c>true</c> if the item was new; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index;index must be greater or equal to 0 and less than capacity</exception>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.FixedSizeBucket`1.GetEnumerator">
            <summary>
                Returns an <see cref="T:System.Collections.Generic.IEnumerator`1" /> that allows to iterate through the collection.
            </summary>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the
                collection.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.FixedSizeBucket`1.Insert(System.Int32,`0)">
            <summary>
                Inserts the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
            <returns>
                <c>true</c> if the item was inserted; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index;index must be greater or equal to 0 and less than capacity.</exception>
            <remarks>
                The insertion can fail if the index is already used or is being written by another thread.
                If the index is being written it can be understood that the insert operation happened before but the item was
                overwritten or removed.
            </remarks>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.FixedSizeBucket`1.Insert(System.Int32,`0,`0@)">
            <summary>
                Inserts the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
            <param name="previous">The previous item in the specified index.</param>
            <returns>
                <c>true</c> if the item was inserted; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index;index must be greater or equal to 0 and less than capacity</exception>
            <remarks>
                The insertion can fail if the index is already used or is being written by another thread.
                If the index is being written it can be understood that the insert operation happened before but the item was
                overwritten or removed.
            </remarks>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.FixedSizeBucket`1.RemoveAt(System.Int32)">
            <summary>
                Removes the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>
                <c>true</c> if the item was removed; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index;index must be greater or equal to 0 and less than capacity</exception>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.FixedSizeBucket`1.RemoveAt(System.Int32,`0@)">
            <summary>
                Removes the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="previous">The previous item in the specified index.</param>
            <returns>
                <c>true</c> if the item was removed; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index;index must be greater or equal to 0 and less than capacity</exception>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.FixedSizeBucket`1.RemoveAt(System.Int32,System.Predicate{`0})">
            <summary>
                Removes the item at the specified index if it matches the specified value.
            </summary>
            <param name="index">The index.</param>
            <param name="check">The predicate to decide to remove.</param>
            <returns>
                <c>true</c> if the item was removed; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index;index must be greater or equal to 0 and less than capacity</exception>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.FixedSizeBucket`1.Set(System.Int32,`0,System.Boolean@)">
            <summary>
                Sets the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
            <param name="isNew">if set to <c>true</c> the index was not previously used.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index;index must be greater or equal to 0 and less than capacity</exception>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.FixedSizeBucket`1.TryGet(System.Int32,`0@)">
            <summary>
                Tries to retrieve the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
            <returns>
                <c>true</c> if the item was retrieved; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index;index must be greater or equal to 0 and less than capacity</exception>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.FixedSizeBucket`1.Update(System.Int32,System.Func{`0,`0},System.Predicate{`0},System.Boolean@)">
            <summary>
                Replaces the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="itemUpdateFactory">The item factory to create the item to replace with.</param>
            <param name="check">The test to update the item.</param>
            <param name="isEmpty">if set to <c>true</c> the index was not previously used.</param>
            <returns>
                <c>true</c> if the item was inserted; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index;index must be greater or equal to 0 and less than capacity.</exception>
            <remarks>
                The insertion can fail if the index is already used or is being written by another thread.
                If the index is being written it can be understood that the insert operation happened before but the item was
                overwritten or removed.
            </remarks>
        </member>
        <member name="T:Theraot.Collections.ThreadSafe.FixedSizeQueue`1">
            <summary>
                Represent a fixed size thread-safe wait-free queue.
            </summary>
            <typeparam name="T">The type of items stored in the queue.</typeparam>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.FixedSizeQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Theraot.Collections.ThreadSafe.FixedSizeQueue`1" /> class.
            </summary>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.FixedSizeQueue`1.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Theraot.Collections.ThreadSafe.FixedSizeQueue`1" /> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="P:Theraot.Collections.ThreadSafe.FixedSizeQueue`1.Capacity">
            <summary>
                Gets the capacity.
            </summary>
        </member>
        <member name="P:Theraot.Collections.ThreadSafe.FixedSizeQueue`1.Count">
            <summary>
                Gets the number of items actually contained.
            </summary>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.FixedSizeQueue`1.GetEnumerator">
            <summary>
                Returns an <see cref="T:System.Collections.Generic.IEnumerator`1" /> that allows to iterate through the collection.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.FixedSizeQueue`1.Peek">
            <summary>
                Returns the next item to be taken without removing it.
            </summary>
            <returns>The next item to be taken.</returns>
            <exception cref="T:System.InvalidOperationException">No more items to be taken.</exception>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.FixedSizeQueue`1.TryAdd(`0)">
            <summary>
                Attempts to Adds the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>
                <c>true</c> if the item was added; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.FixedSizeQueue`1.TryPeek(`0@)">
            <summary>
                Attempts to retrieve the next item to be taken without removing it.
            </summary>
            <param name="item">The item retrieved.</param>
            <returns>
                <c>true</c> if an item was retrieved; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.FixedSizeQueue`1.TryTake(`0@)">
            <summary>
                Attempts to retrieve and remove the next item.
            </summary>
            <param name="item">The item.</param>
            <returns>
                <c>true</c> if the item was taken; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Theraot.Collections.ThreadSafe.ThreadSafeCollection`1">
            <summary>
                Represent a thread-safe lock-free hash based collection.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeCollection`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Theraot.Collections.ThreadSafe.ThreadSafeCollection`1" /> class.
            </summary>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeCollection`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Theraot.Collections.ThreadSafe.ThreadSafeCollection`1" /> class.
            </summary>
            <param name="comparer">The value comparer.</param>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeCollection`1.Clear">
            <summary>
                Removes all the elements.
            </summary>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeCollection`1.ClearEnumerable">
            <summary>
                Removes all the elements.
            </summary>
            <returns>Returns the removed pairs.</returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeCollection`1.Contains(`0)">
            <summary>
                Determines whether the specified value is contained.
            </summary>
            <param name="item">The value.</param>
            <returns>
                <c>true</c> if the specified value is contained; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
                Copies the items to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
            <exception cref="T:System.ArgumentNullException">array</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex;Non-negative number is required.</exception>
            <exception cref="T:System.ArgumentException">array;The array can not contain the number of elements.</exception>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeCollection`1.GetEnumerator">
            <summary>
                Returns an <see cref="T:System.Collections.Generic.IEnumerator`1" /> that allows to iterate through the collection.
            </summary>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the
                collection.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeCollection`1.Remove(`0)">
            <summary>
                Removes the specified value.
            </summary>
            <param name="item">The value.</param>
            <returns>
                <c>true</c> if the specified value was removed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeCollection`1.RemoveWhere(System.Predicate{`0})">
            <summary>
                Removes the values where the predicate is satisfied.
            </summary>
            <param name="check">The predicate.</param>
            <returns>
                The number or removed values.
            </returns>
            <remarks>
                It is not guaranteed that all the values that satisfies the predicate will be removed.
            </remarks>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeCollection`1.RemoveWhereEnumerable(System.Predicate{`0})">
            <summary>
                Removes the values where the predicate is satisfied.
            </summary>
            <param name="check">The predicate.</param>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that allows to iterate over the removed values.
            </returns>
            <remarks>
                It is not guaranteed that all the values that satisfies the predicate will be removed.
            </remarks>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeCollection`1.Where(System.Predicate{`0})">
            <summary>
                Returns the values where the predicate is satisfied.
            </summary>
            <param name="check">The predicate.</param>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that allows to iterate over the values.
            </returns>
            <remarks>
                It is not guaranteed that all the values that satisfies the predicate will be returned.
            </remarks>
        </member>
        <member name="T:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2">
            <summary>
                Represent a thread-safe lock-free hash based dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <remarks>
                Consider wrapping this class to implement <see cref="T:System.Collections.Generic.IDictionary`2" /> or any other
                desired interface.
            </remarks>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2" /> class.
            </summary>
            <param name="comparer">The key comparer.</param>
            <param name="initialProbing">The number of steps in linear probing.</param>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2" /> class.
            </summary>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2" /> class.
            </summary>
            <param name="initialProbing">The number of steps in linear probing.</param>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2" /> class.
            </summary>
            <param name="comparer">The key comparer.</param>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2.AddNew(`0,`1)">
            <summary>
                Adds the specified key and associated value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentException">An item with the same key has already been added</exception>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2.Clear">
            <summary>
                Removes all the elements.
            </summary>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2.ClearEnumerable">
            <summary>
                Removes all the elements.
            </summary>
            <returns>Returns the removed pairs.</returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2.ContainsKey(`0)">
            <summary>
                Determines whether the specified key is contained.
            </summary>
            <param name="key">The key.</param>
            <returns>
                <c>true</c> if the specified key is contained; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2.ContainsKey(System.Int32,System.Predicate{`0})">
            <summary>
                Determines whether the specified key is contained.
            </summary>
            <param name="hashCode">The hash code to look for.</param>
            <param name="keyCheck">The key predicate.</param>
            <returns>
                <c>true</c> if the specified key is contained; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2.ContainsKey(System.Int32,System.Predicate{`0},System.Predicate{`1})">
            <summary>
                Determines whether the specified key is contained.
            </summary>
            <param name="hashCode">The hash code to look for.</param>
            <param name="keyCheck">The key predicate.</param>
            <param name="valueCheck">The value predicate.</param>
            <returns>
                <c>true</c> if the specified key is contained; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
                Copies the items to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
            <exception cref="T:System.ArgumentNullException">array</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex;Non-negative number is required.</exception>
            <exception cref="T:System.ArgumentException">array;The array can not contain the number of elements.</exception>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2.GetEnumerator">
            <summary>
                Returns an <see cref="T:System.Collections.Generic.IEnumerator`1" /> that allows to iterate through the collection.
            </summary>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the
                collection.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2.GetPairs">
            <summary>
                Gets the pairs contained in this object.
            </summary>
            <returns>The pairs contained in this object</returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2.Remove(`0)">
            <summary>
                Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>
                <c>true</c> if the specified key was removed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2.Remove(`0,`1@)">
            <summary>
                Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>
                <c>true</c> if the specified key was removed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2.Remove(System.Int32,System.Predicate{`0},`1@)">
            <summary>
                Removes a key by hash code and a key predicate.
            </summary>
            <param name="hashCode">The hash code to look for.</param>
            <param name="keyCheck">The key predicate.</param>
            <param name="value">The value.</param>
            <returns>
                <c>true</c> if the specified key was removed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2.Remove(`0,System.Predicate{`1},`1@)">
            <summary>
                Removes the specified key if the value predicate passes.
            </summary>
            <param name="key">The key.</param>
            <param name="valueCheck">The value predicate.</param>
            <param name="value">The value.</param>
            <returns>
                <c>true</c> if the specified key was removed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2.Remove(System.Int32,System.Predicate{`0},System.Predicate{`1},`1@)">
            <summary>
                Removes a key by hash code, key predicate and value predicate.
            </summary>
            <param name="hashCode">The hash code to look for.</param>
            <param name="keyCheck">The key predicate.</param>
            <param name="valueCheck">The value predicate.</param>
            <param name="value">The value.</param>
            <returns>
                <c>true</c> if the specified key was removed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2.RemoveWhereKey(System.Predicate{`0})">
            <summary>
                Removes the keys and associated values where the key satisfies the predicate.
            </summary>
            <param name="keyCheck">The predicate.</param>
            <returns>
                The number or removed pairs of keys and associated values.
            </returns>
            <remarks>
                It is not guaranteed that all the pairs of keys and associated values that satisfies the predicate will be removed.
            </remarks>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2.RemoveWhereKeyEnumerable(System.Predicate{`0})">
            <summary>
                Removes the keys and associated values where the key satisfies the predicate.
            </summary>
            <param name="keyCheck">The predicate.</param>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that allows to iterate over the values of the removed pairs.
            </returns>
            <remarks>
                It is not guaranteed that all the pairs of keys and associated values that satisfies the predicate will be removed.
            </remarks>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2.RemoveWhereValue(System.Predicate{`1})">
            <summary>
                Removes the keys and associated values where the value satisfies the predicate.
            </summary>
            <param name="valueCheck">The predicate.</param>
            <returns>
                The number or removed pairs of keys and associated values.
            </returns>
            <remarks>
                It is not guaranteed that all the pairs of keys and associated values that satisfies the predicate will be removed.
            </remarks>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2.RemoveWhereValueEnumerable(System.Predicate{`1})">
            <summary>
                Removes the keys and associated values where the value satisfies the predicate.
            </summary>
            <param name="valueCheck">The predicate.</param>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that allows to iterate over the values of the removed pairs.
            </returns>
            <remarks>
                It is not guaranteed that all the pairs of keys and associated values that satisfies the predicate will be removed.
            </remarks>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2.Set(`0,`1)">
            <summary>
                Sets the value associated with the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2.Set(`0,`1,System.Boolean@)">
            <summary>
                Sets the value associated with the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="isNew">if set to <c>true</c> the item value was set.</param>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2.TryAdd(`0,`1)">
            <summary>
                Attempts to add the specified key and associated value. The value is added if the key is not found.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>
                <c>true</c> if the specified key and associated value were added; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2.TryAdd(`0,`1,System.Collections.Generic.KeyValuePair{`0,`1}@)">
            <summary>
                Attempts to add the specified key and associated value. The value is added if the key is not found.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="stored">The stored pair independently of success.</param>
            <returns>
                <c>true</c> if the specified key and associated value were added; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2.TryGetValue(`0,`1@)">
            <summary>
                Tries to retrieve the value associated with the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>
                <c>true</c> if the value was retrieved; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2.Where(System.Predicate{`0})">
            <summary>
                Returns the values where the key satisfies the predicate.
            </summary>
            <param name="keyCheck">The predicate.</param>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that allows to iterate over the values of the matched pairs.
            </returns>
            <remarks>
                It is not guaranteed that all the pairs of keys and associated values that satisfies the predicate will be
                returned.
            </remarks>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2.WhereValue(System.Predicate{`1})">
            <summary>
                Returns the values where the value satisfies the predicate.
            </summary>
            <param name="valueCheck">The predicate.</param>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that allows to iterate over the values of the matched pairs.
            </returns>
            <remarks>
                It is not guaranteed that all the pairs of keys and associated values that satisfies the predicate will be
                returned.
            </remarks>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2.AddNew(`0,System.Predicate{`0},`1)">
            <summary>
                Adds the specified key and associated value.
            </summary>
            <param name="key">The key.</param>
            <param name="keyOverwriteCheck">The key predicate to approve overwriting.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentException">An item with the same key has already been added</exception>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2.Set(`0,System.Predicate{`0},`1)">
            <summary>
                Sets the value associated with the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="keyOverwriteCheck">The key predicate to approve overwriting.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2.Set(`0,System.Predicate{`0},`1,System.Boolean@)">
            <summary>
                Sets the value associated with the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="keyOverwriteCheck">The key predicate to approve overwriting.</param>
            <param name="value">The value.</param>
            <param name="isNew">if set to <c>true</c> the item value was set.</param>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2.TryAdd(`0,System.Predicate{`0},`1)">
            <summary>
                Attempts to add the specified key and associated value. The value is added if the key is not found.
            </summary>
            <param name="key">The key.</param>
            <param name="keyOverwriteCheck">The key predicate to approve overwriting.</param>
            <param name="value">The value.</param>
            <returns>
                <c>true</c> if the specified key and associated value were added; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2.TryGetValue(System.Int32,System.Predicate{`0},`1@)">
            <summary>
                Tries to retrieve the value by hash code and key predicate.
            </summary>
            <param name="hashCode">The hash code to look for.</param>
            <param name="keyCheck">The key predicate.</param>
            <param name="value">The value.</param>
            <returns>
                <c>true</c> if the value was retrieved; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeDictionary`2.TryAdd(`0,System.Predicate{`0},`1,System.Collections.Generic.KeyValuePair{`0,`1}@)">
            <summary>
                Attempts to add the specified key and associated value. The value is added if the key is not found.
            </summary>
            <param name="key">The key.</param>
            <param name="keyOverwriteCheck">The key predicate to approve overwriting.</param>
            <param name="value">The value.</param>
            <param name="stored">The stored pair independently of success.</param>
            <returns>
                <c>true</c> if the specified key and associated value were added; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Theraot.Collections.ThreadSafe.ThreadSafeQueue`1">
            <summary>
                Represent a fixed size thread-safe lock-free (read may loop) queue.
            </summary>
            <typeparam name="T">The type of items stored in the queue.</typeparam>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeQueue`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Theraot.Collections.ThreadSafe.ThreadSafeQueue`1" /> class.
            </summary>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Theraot.Collections.ThreadSafe.ThreadSafeQueue`1" /> class.
            </summary>
            <param name="source">
                The source for the initial contents of the <see cref="T:Theraot.Collections.ThreadSafe.ThreadSafeQueue`1" />.
            </param>
        </member>
        <member name="P:Theraot.Collections.ThreadSafe.ThreadSafeQueue`1.Count">
            <summary>
                Gets the number of items actually contained.
            </summary>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeQueue`1.Add(`0)">
            <summary>
                Attempts to Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeQueue`1.GetEnumerator">
            <summary>
                Returns an <see cref="T:System.Collections.Generic.IEnumerator`1" /> that allows to iterate through the collection.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeQueue`1.TryPeek(`0@)">
            <summary>
                Attempts to retrieve the next item to be taken without removing it.
            </summary>
            <param name="item">The item retrieved.</param>
            <returns>
                <c>true</c> if an item was retrieved; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeQueue`1.TryTake(`0@)">
            <summary>
                Attempts to retrieve and remove the next item.
            </summary>
            <param name="item">The item.</param>
            <returns>
                <c>true</c> if the item was taken; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Theraot.Collections.ThreadSafe.ThreadSafeSet`1">
            <summary>
                Represent a thread-safe lock-free hash based dictionary.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeSet`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Theraot.Collections.ThreadSafe.ThreadSafeSet`1" /> class.
            </summary>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Theraot.Collections.ThreadSafe.ThreadSafeSet`1" /> class.
            </summary>
            <param name="comparer">The value comparer.</param>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Theraot.Collections.ThreadSafe.ThreadSafeSet`1" /> class.
            </summary>
            <param name="comparer">The value comparer.</param>
            <param name="initialProbing">The number of steps in linear probing.</param>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeSet`1.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Theraot.Collections.ThreadSafe.ThreadSafeSet`1" /> class.
            </summary>
            <param name="initialProbing">The number of steps in linear probing.</param>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeSet`1.AddNew(`0)">
            <summary>
                Adds the specified value.
            </summary>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentException">the value is already present</exception>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeSet`1.Clear">
            <summary>
                Removes all the elements.
            </summary>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeSet`1.ClearEnumerable">
            <summary>
                Removes all the elements.
            </summary>
            <returns>Returns the removed pairs.</returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeSet`1.Contains(System.Int32,System.Predicate{`0})">
            <summary>
                Determines whether the specified value is contained.
            </summary>
            <param name="hashCode">The hash code to look for.</param>
            <param name="check">The value predicate.</param>
            <returns>
                <c>true</c> if the specified value is contained; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeSet`1.Contains(`0)">
            <summary>
                Determines whether the specified value is contained.
            </summary>
            <param name="item">The value.</param>
            <returns>
                <c>true</c> if the specified value is contained; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeSet`1.CopyTo(`0[],System.Int32)">
            <summary>
                Copies the items to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
            <exception cref="T:System.ArgumentNullException">array</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex;Non-negative number is required.</exception>
            <exception cref="T:System.ArgumentException">array;The array can not contain the number of elements.</exception>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeSet`1.GetEnumerator">
            <summary>
                Returns an <see cref="T:System.Collections.Generic.IEnumerator`1" /> that allows to iterate through the collection.
            </summary>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the
                collection.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeSet`1.GetValues">
            <summary>
                Gets the pairs contained in this object.
            </summary>
            <returns>The pairs contained in this object</returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeSet`1.Remove(System.Int32,System.Predicate{`0},`0@)">
            <summary>
                Removes a value by hash code and a value predicate.
            </summary>
            <param name="hashCode">The hash code to look for.</param>
            <param name="check">The value predicate.</param>
            <param name="value">The value.</param>
            <returns>
                <c>true</c> if the specified value was removed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeSet`1.Remove(`0)">
            <summary>
                Removes the specified value.
            </summary>
            <param name="item">The value.</param>
            <returns>
                <c>true</c> if the specified value was removed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeSet`1.Remove(`0,`0@)">
            <summary>
                Removes the specified value.
            </summary>
            <param name="item">The value.</param>
            <param name="previous">The found value that was removed.</param>
            <returns>
                <c>true</c> if the specified value was removed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeSet`1.RemoveWhere(System.Predicate{`0})">
            <summary>
                Removes the values where the predicate is satisfied.
            </summary>
            <param name="check">The predicate.</param>
            <returns>
                The number or removed values.
            </returns>
            <remarks>
                It is not guaranteed that all the values that satisfies the predicate will be removed.
            </remarks>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeSet`1.RemoveWhereEnumerable(System.Predicate{`0})">
            <summary>
                Removes the values where the predicate is satisfied.
            </summary>
            <param name="check">The predicate.</param>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that allows to iterate over the removed values.
            </returns>
            <remarks>
                It is not guaranteed that all the values that satisfies the predicate will be removed.
            </remarks>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeSet`1.TryGetValue(System.Int32,System.Predicate{`0},`0@)">
            <summary>
                Tries to retrieve the value by hash code and value predicate.
            </summary>
            <param name="hashCode">The hash code to look for.</param>
            <param name="check">The value predicate.</param>
            <param name="value">The value.</param>
            <returns>
                <c>true</c> if the value was retrieved; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeSet`1.Where(System.Predicate{`0})">
            <summary>
                Returns the values where the predicate is satisfied.
            </summary>
            <param name="check">The predicate.</param>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that allows to iterate over the values.
            </returns>
            <remarks>
                It is not guaranteed that all the values that satisfies the predicate will be returned.
            </remarks>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeSet`1.TryAdd(`0,System.Predicate{`0})">
            <summary>
                Attempts to add the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="valueOverwriteCheck">The value predicate to approve overwriting.</param>
            <returns>
                <c>true</c> if the specified key and associated value were added; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Theraot.Collections.ThreadSafe.ThreadSafeStack`1">
            <summary>
                Represent a fixed size thread-safe lock-free (loops) stack.
            </summary>
            <typeparam name="T">The type of items stored in the stack.</typeparam>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeStack`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Theraot.Collections.ThreadSafe.ThreadSafeStack`1" /> class.
            </summary>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeStack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Theraot.Collections.ThreadSafe.ThreadSafeStack`1" /> class.
            </summary>
        </member>
        <member name="P:Theraot.Collections.ThreadSafe.ThreadSafeStack`1.Count">
            <summary>
                Gets the number of items actually contained.
            </summary>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeStack`1.Add(`0)">
            <summary>
                Attempts to Adds the specified item at the front.
            </summary>
            <param name="item">The item.</param>
            <returns>
                <c>true</c> if the item was added; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeStack`1.GetEnumerator">
            <summary>
                Returns an <see cref="T:System.Collections.Generic.IEnumerator`1" /> that allows to iterate through the collection.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeStack`1.Peek">
            <summary>
                Returns the next item to be taken from the back without removing it.
            </summary>
            <returns>The next item to be taken from the back.</returns>
            <exception cref="T:System.InvalidOperationException">No more items to be taken.</exception>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeStack`1.TryPeek(`0@)">
            <summary>
                Attempts to retrieve the next item to be taken from the back without removing it.
            </summary>
            <param name="item">The item retrieved.</param>
            <returns>
                <c>true</c> if an item was retrieved; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.ThreadSafeStack`1.TryTake(`0@)">
            <summary>
                Attempts to retrieve and remove the next item from the back.
            </summary>
            <param name="item">The item.</param>
            <returns>
                <c>true</c> if the item was taken; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.WeakDictionary`2.AddNew(`0,`1)">
            <summary>
                Adds the specified key and associated value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentException">An item with the same key has already been added</exception>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.WeakDictionary`2.Clear">
            <summary>
                Removes all the elements.
            </summary>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.WeakDictionary`2.ClearEnumerable">
            <summary>
                Removes all the elements.
            </summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerable" /> containing the removed elements.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.WeakDictionary`2.ContainsKey(`0)">
            <summary>
                Determines whether the specified key is contained.
            </summary>
            <param name="key">The key.</param>
            <returns>
                <c>true</c> if the specified key is contained; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.WeakDictionary`2.ContainsKey(System.Int32,System.Predicate{`0})">
            <summary>
                Determines whether the specified key is contained.
            </summary>
            <param name="hashCode">The hash code to look for.</param>
            <param name="keyCheck">The key predicate.</param>
            <returns>
                <c>true</c> if the specified key is contained; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyCheck" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.WeakDictionary`2.ContainsKey(System.Int32,System.Predicate{`0},System.Predicate{`1})">
            <summary>
                Determines whether the specified key is contained.
            </summary>
            <param name="hashCode">The hash code to look for.</param>
            <param name="keyCheck">The key predicate.</param>
            <param name="valueCheck">The value predicate.</param>
            <returns>
                <c>true</c> if the specified key is contained; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyCheck" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.WeakDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
                Copies the items to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
            <exception cref="T:System.ArgumentNullException">array</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex;Non-negative number is required.</exception>
            <exception cref="T:System.ArgumentException">array;The array can not contain the number of elements.</exception>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.WeakDictionary`2.GetEnumerator">
            <summary>
                Returns an <see cref="T:System.Collections.Generic.IEnumerator`1" /> that allows to iterate through the collection.
            </summary>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the
                collection.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.WeakDictionary`2.GetPairs">
            <summary>
                Gets the pairs contained in this object.
            </summary>
            <returns>
                An <see cref="T:System.Collections.IList" /> containing a copy of the contents of this object.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.WeakDictionary`2.Remove(`0)">
            <summary>
                Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>
                <c>true</c> if the specified key was removed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.WeakDictionary`2.Remove(`0,System.Predicate{`1},`1@)">
            <summary>
                Removes a key by hash code, key predicate and value predicate.
            </summary>
            <param name="key">The key.</param>
            <param name="valueCheck">The value predicate.</param>
            <param name="value">The value.</param>
            <returns>
                <c>true</c> if the specified key was removed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.WeakDictionary`2.Remove(`0,`1@)">
            <summary>
                Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>
                <c>true</c> if the specified key was removed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.WeakDictionary`2.Remove(System.Int32,System.Predicate{`0},`1@)">
            <summary>
                Removes a key by hash code and a key predicate.
            </summary>
            <param name="hashCode">The hash code to look for.</param>
            <param name="keyCheck">The key predicate.</param>
            <param name="value">The value.</param>
            <returns>
                <c>true</c> if the specified key was removed; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyCheck" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.WeakDictionary`2.Remove(System.Int32,System.Predicate{`0},System.Predicate{`1},`1@)">
            <summary>
                Removes a key by hash code, key predicate and value predicate.
            </summary>
            <param name="hashCode">The hash code to look for.</param>
            <param name="keyCheck">The key predicate.</param>
            <param name="valueCheck">The value predicate.</param>
            <param name="value">The value.</param>
            <returns>
                <c>true</c> if the specified key was removed; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyCheck" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.WeakDictionary`2.RemoveWhereKey(System.Predicate{`0})">
            <summary>
                Removes the keys and associated values where the key satisfies the predicate.
            </summary>
            <param name="keyCheck">The predicate.</param>
            <returns>
                The number or removed pairs of keys and associated values.
            </returns>
            <remarks>
                It is not guaranteed that all the pairs of keys and associated values that satisfies the predicate will be removed.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyCheck" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.WeakDictionary`2.RemoveWhereKeyEnumerable(System.Predicate{`0})">
            <summary>
                Removes the keys and associated values where the key satisfies the predicate.
            </summary>
            <param name="keyCheck">The predicate.</param>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that allows to iterate over the values of the removed pairs.
            </returns>
            <remarks>
                It is not guaranteed that all the pairs of keys and associated values that satisfies the predicate will be removed.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyCheck" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.WeakDictionary`2.RemoveWhereValue(System.Predicate{`1})">
            <summary>
                Removes the keys and associated values where the value satisfies the predicate.
            </summary>
            <param name="valueCheck">The predicate.</param>
            <returns>
                The number or removed pairs of keys and associated values.
            </returns>
            <remarks>
                It is not guaranteed that all the pairs of keys and associated values that satisfies the predicate will be removed.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="valueCheck" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.WeakDictionary`2.RemoveWhereValueEnumerable(System.Predicate{`1})">
            <summary>
                Removes the keys and associated values where the value satisfies the predicate.
            </summary>
            <param name="valueCheck">The predicate.</param>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that allows to iterate over the values of the removed pairs.
            </returns>
            <remarks>
                It is not guaranteed that all the pairs of keys and associated values that satisfies the predicate will be removed.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="valueCheck" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.WeakDictionary`2.Set(`0,`1)">
            <summary>
                Sets the value associated with the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.WeakDictionary`2.Set(`0,`1,System.Boolean@)">
            <summary>
                Sets the value associated with the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="isNew">if set to <c>true</c> the item value was set.</param>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.WeakDictionary`2.TryAdd(`0,`1)">
            <summary>
                Attempts to add the specified key and associated value. The value is added if the key is not found.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>
                <c>true</c> if the specified key and associated value were added; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.WeakDictionary`2.TryAdd(`0,`1,System.Collections.Generic.KeyValuePair{`0,`1}@)">
            <summary>
                Attempts to add the specified key and associated value. The value is added if the key is not found.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="stored">The stored pair independently of success.</param>
            <returns>
                <c>true</c> if the specified key and associated value were added; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.WeakDictionary`2.TryGetValue(`0,`1@)">
            <summary>
                Tries to retrieve the value associated with the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>
                <c>true</c> if the value was retrieved; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.WeakDictionary`2.TryGetValue(System.Int32,System.Predicate{`0},`1@)">
            <summary>
                Tries to retrieve the value by hash code and key predicate.
            </summary>
            <param name="hashCode">The hash code to look for.</param>
            <param name="keyCheck">The key predicate.</param>
            <param name="value">The value.</param>
            <returns>
                <c>true</c> if the value was retrieved; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyCheck" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.WeakDictionary`2.Where(System.Predicate{`0})">
            <summary>
                Returns the values where the key satisfies the predicate.
            </summary>
            <param name="keyCheck">The predicate.</param>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that allows to iterate over the values of the matched pairs.
            </returns>
            <remarks>
                It is not guaranteed that all the pairs of keys and associated values that satisfies the predicate will be
                returned.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyCheck" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.WeakDictionary`2.WhereValue(System.Predicate{`1})">
            <summary>
                Returns the values where the value satisfies the predicate.
            </summary>
            <param name="valueCheck">The predicate.</param>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that allows to iterate over the values of the matched pairs.
            </returns>
            <remarks>
                It is not guaranteed that all the pairs of keys and associated values that satisfies the predicate will be
                returned.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="valueCheck" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.WeakDictionary`2.AddNew(`0,System.Predicate{`0},`1)">
            <summary>
                Adds the specified key and associated value.
            </summary>
            <param name="key">The key.</param>
            <param name="keyOverwriteCheck">The key predicate to approve overwriting.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentException">An item with the same key has already been added</exception>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.WeakDictionary`2.Set(`0,System.Predicate{`0},`1)">
            <summary>
                Sets the value associated with the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="keyOverwriteCheck">The key predicate to approve overwriting.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.WeakDictionary`2.Set(`0,System.Predicate{`0},`1,System.Boolean@)">
            <summary>
                Sets the value associated with the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="keyOverwriteCheck">The key predicate to approve overwriting.</param>
            <param name="value">The value.</param>
            <param name="isNew">if set to <c>true</c> the item value was set.</param>
        </member>
        <member name="M:Theraot.Collections.ThreadSafe.WeakDictionary`2.TryAdd(`0,System.Predicate{`0},`1)">
            <summary>
                Attempts to add the specified key and associated value. The value is added if the key is not found.
            </summary>
            <param name="key">The key.</param>
            <param name="keyOverwriteCheck">The key predicate to approve overwriting.</param>
            <param name="value">The value.</param>
            <returns>
                <c>true</c> if the specified key and associated value were added; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Theraot.Core.StringProcessor">
            <summary>
                A class to extract information from strings.
            </summary>
            <remarks>
                An alternative for StringReader for all your parsing needs.
                StringProcessor is NOT thread safe. Do not share instances without locking.
            </remarks>
        </member>
        <member name="M:Theraot.Core.StringProcessor.#ctor(System.String)">
            <summary>
                Creates a new instance of StringProcessor.
            </summary>
            <param name="str">The string to process.</param>
            <exception cref="T:System.ArgumentNullException">The string is null.</exception>
        </member>
        <member name="P:Theraot.Core.StringProcessor.Count">
            <summary>
                Gets the number of characters yet to process.
            </summary>
        </member>
        <member name="P:Theraot.Core.StringProcessor.EndOfString">
            <summary>
                Gets a value that indicates whether the current position is at the end of the string.
            </summary>
        </member>
        <member name="P:Theraot.Core.StringProcessor.Position">
            <summary>
                Gets or sets the current position withing the underlying string.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
                The position must be greater or equal to zero and less or equal to the length of
                the underlying string.
            </exception>
        </member>
        <member name="P:Theraot.Core.StringProcessor.String">
            <summary>
                Gets the underlying string.
            </summary>
        </member>
        <member name="M:Theraot.Core.StringProcessor.ExtractUntil(System.String@,System.Char)">
            <summary>
                Reads the underlying string advancing the current position until afterwards the provided character is found.
            </summary>
            <param name="found">The found string.</param>
            <param name="target">The character to look for. The delimiter.</param>
            <returns><c>true</c> if the target was found; otherwise <c>false</c></returns>
        </member>
        <member name="M:Theraot.Core.StringProcessor.ExtractUntil(System.String@,System.String)">
            <summary>
                Reads the underlying string advancing the current position until afterwards the provided string is found.
            </summary>
            <param name="found">The found string.</param>
            <param name="target">The string to look for. The delimiter.</param>
            <returns><c>true</c> if the target was found; otherwise <c>false</c></returns>
        </member>
        <member name="M:Theraot.Core.StringProcessor.ExtractUntil(System.String@,System.String,System.StringComparison)">
            <summary>
                Reads the underlying string advancing the current position until afterwards the provided string is found.
            </summary>
            <param name="found">The found string.</param>
            <param name="target">The string to look for. The delimiter.</param>
            <param name="stringComparison">One of the enumeration values that specifies the rules for the search.</param>
            <returns><c>true</c> if the target was found; otherwise <c>false</c></returns>
        </member>
        <member name="M:Theraot.Core.StringProcessor.ExtractUntilAfter(System.String@,System.Char)">
            <summary>
                Reads the underlying string advancing the current position until afterwards the provided character is found.
            </summary>
            <param name="found">The found string.</param>
            <param name="target">The character to look for. The delimiter.</param>
            <returns><c>true</c> if the target was found; otherwise <c>false</c></returns>
        </member>
        <member name="M:Theraot.Core.StringProcessor.ExtractUntilAfter(System.String@,System.String)">
            <summary>
                Reads the underlying string advancing the current position until afterwards the provided string is found.
            </summary>
            <param name="found">The found string.</param>
            <param name="target">The string to look for. The delimiter.</param>
            <returns><c>true</c> if the target was found; otherwise <c>false</c></returns>
        </member>
        <member name="M:Theraot.Core.StringProcessor.ExtractUntilAfter(System.String@,System.String,System.StringComparison)">
            <summary>
                Reads the underlying string advancing the current position until afterwards the provided string is found.
            </summary>
            <param name="found">The found string.</param>
            <param name="target">The string to look for. The delimiter.</param>
            <param name="stringComparison">One of the enumeration values that specifies the rules for the search.</param>
            <returns><c>true</c> if the target was found; otherwise <c>false</c></returns>
        </member>
        <member name="M:Theraot.Core.StringProcessor.Peek">
            <summary>
                Reads the next character from the underlying string.
            </summary>
            <returns>The next character from the underlying string, or -1 if no more characters are available.</returns>
        </member>
        <member name="M:Theraot.Core.StringProcessor.Peek(System.Char)">
            <summary>
                Checks if the next character from underlying string matches the input character.
            </summary>
            <param name="target">The character to check against.</param>
            <returns>
                <c>true</c> if the characters match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Core.StringProcessor.Peek(System.Func{System.Char,System.Boolean})">
            <summary>
                Checks if the next character from the underlying string passes the predicate.
            </summary>
            <param name="predicate">The predicate to test the characters.</param>
            <returns>
                <c>true</c> if the successful; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">The predicate is null.</exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.Peek(System.String)">
            <summary>
                Checks if the next characters from underlying string matches the input string.
            </summary>
            <param name="target">The string to check against.</param>
            <returns>
                <c>true</c> if the strings match; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">The target string is null.</exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.PeekChar">
            <summary>
                Checks the next character from the string.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">Reached the end of the string.</exception>
            <returns>
                <c>true</c> if the character was recovered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Core.StringProcessor.Read">
            <summary>
                Reads the next character from the underlying string. If successful advances the character position by one
                character.
            </summary>
            <returns>The next character from the underlying string, or -1 if no more characters are available.</returns>
        </member>
        <member name="M:Theraot.Core.StringProcessor.Read(System.Char)">
            <summary>
                Checks if the next character from underlying string matches the input character, if so advances the character
                position one character.
            </summary>
            <param name="target">The character to check against.</param>
            <returns>
                <c>true</c> if the characters match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Core.StringProcessor.Read(System.Char[],System.Int32,System.Int32)">
            <summary>
                Reads a block of characters from the input string and advances the character position by
                <paramref name="count" />.
            </summary>
            <returns>
                The total number of characters read into the buffer. This can be less than the number of characters requested
                if that many characters are not currently available, or zero if the end of the underlying string has been reached.
            </returns>
            <param name="destination">
                When this method returns, contains the specified character array with the values between
                <paramref name="destinationIndex" /> and (<paramref name="destinationIndex" /> + <paramref name="count" /> - 1)
                replaced by the characters read from the current source.
            </param>
            <param name="destinationIndex">The starting index in the buffer. </param>
            <param name="count">The number of characters to read. </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="destination" /> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
                The buffer length minus <paramref name="destinationIndex" /> is less than
                <paramref name="count" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="destinationIndex" /> or <paramref name="count" /> is negative.
            </exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.Read(System.Func{System.Char,System.Boolean})">
            <summary>
                Reads the next character from the underlying string if it passes the predicate. If successful advances the
                character position by one character.
            </summary>
            <param name="predicate">The predicate to test the characters.</param>
            <returns>The read string.</returns>
            <exception cref="T:System.ArgumentNullException">The predicate is null.</exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.Read(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Checks if the next characters from underlying string matches any of the input strings, if so advances the character
                position by the length of the string.
            </summary>
            <remarks>
                The strings are tested in the order they are provided. Sorting the strings from longer to shorter is
                suggested.
            </remarks>
            <param name="targets">The list of string to check against.</param>
            <returns>
                The matched string if any; otherwise, <c>null</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">The targets collection is null.</exception>
            <exception cref="T:System.ArgumentException">Found nulls in the targets collection.</exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.Read(System.Int32)">
            <summary>
                Reads the next characters from the underlying string, if there are enough. If successful advances the character
                position by the given length.
            </summary>
            <param name="length">The number of characters to read.</param>
            <returns>The read string if there was enough characters left; otherwise null.</returns>
        </member>
        <member name="M:Theraot.Core.StringProcessor.Read(System.String)">
            <summary>
                Checks if the next characters from underlying string matches the input string, if so advances the character
                position by the length of the string.
            </summary>
            <param name="target">The string to check against.</param>
            <returns>
                <c>true</c> if the strings match; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">The target string is null.</exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.ReadChar">
            <summary>
                Attempts to read the next character from the string. If successful advances the character position by one
                character.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">Reached the end of the string.</exception>
            <returns>
                <c>true</c> if the character was recovered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Core.StringProcessor.ReadLine">
            <summary>Reads a line from the underlying string.</summary>
            <returns>The next line from the underlying string, or null if the end of the underlying string is reached.</returns>
            <remarks>The string that is returned does not contain the terminating carriage return or line feed.</remarks>
        </member>
        <member name="M:Theraot.Core.StringProcessor.ReadToEnd">
            <summary>Reads the underlying string either in its entirety or from the current position to the end.</summary>
            <returns>The content from the current position to the end of the underlying string.</returns>
        </member>
        <member name="M:Theraot.Core.StringProcessor.ReadToPosition(System.Int32)">
            <summary>
                Reads the underlying string advancing the current position to the given position.
            </summary>
            <param name="position">To position to which to read to.</param>
            <returns>The read string.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The new position must be greater than the current position.</exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.ReadUntil(System.Char,System.Boolean)">
            <summary>
                Reads the underlying string advancing the current position until the provided character is found or (if Greedy) to
                the end of the string is reached.
            </summary>
            <remarks>
                If the end of the string is not reached, the provided character will be the next thing to be read afterwards.
                The provided character is not included in the returned string.
            </remarks>
            <param name="target">The character to look for.</param>
            <param name="greedy">Whether or not to do a Greedy search.</param>
            <returns>The read string if found; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Theraot.Core.StringProcessor.ReadUntil(System.Char[],System.Boolean)">
            <summary>
                Reads the underlying string advancing the current position until any of the provided characters is found or (if
                Greedy) to the end of the string is reached.
            </summary>
            <remarks>
                If the end of the string is not reached, the character found will be the next thing to be read afterwards. The
                character found is not included in the returned string.
            </remarks>
            <param name="targets">The string to look for.</param>
            <param name="greedy">Whether or not to do a Greedy search.</param>
            <returns>The read string.</returns>
            <exception cref="T:System.ArgumentNullException">The targets collection is null.</exception>
            <exception cref="T:System.ArgumentException">Found nulls in the targets collection.</exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.ReadUntil(System.Func{System.Char,System.Boolean})">
            <summary>
                Reads the underlying string advancing the current position until a character passes the provided predicate or (if
                Greedy) to the end of the string is reached.
            </summary>
            <remarks>
                If the end of the string is not reached, the character that passes the predicate will be the next thing to be
                read afterwards. The character that passes the predicate is not included in the returned string.
            </remarks>
            <param name="predicate">The predicate to test the characters.</param>
            <returns>The read string.</returns>
            <exception cref="T:System.ArgumentNullException">The predicate is null.</exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.ReadUntil(System.Collections.Generic.IEnumerable{System.Char},System.Boolean)">
            <summary>
                Reads the underlying string advancing the current position until any of the provided characters is found or (if
                Greedy) to the end of the string is reached.
            </summary>
            <remarks>
                If the end of the string is not reached, the character found will be the next thing to be read afterwards. The
                character found is not included in the returned string.
            </remarks>
            <param name="targets">The string to look for.</param>
            <param name="greedy">Whether or not to do a Greedy search.</param>
            <returns>The read string.</returns>
            <exception cref="T:System.ArgumentNullException">The targets collection is null.</exception>
            <exception cref="T:System.ArgumentException">Found nulls in the targets collection.</exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.ReadUntil(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
                Reads the underlying string advancing the current position until any of the provided strings is found or (if
                Greedy) to the end of the string is reached.
            </summary>
            <remarks>
                If the end of the string is not reached, the string found will be the next thing to be read afterwards. The
                string found is not included in the returned string.
            </remarks>
            <param name="targets">The string to look for.</param>
            <param name="greedy">Whether or not to do a Greedy search.</param>
            <returns>The read string if found; otherwise <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The targets collection is null.</exception>
            <exception cref="T:System.ArgumentException">Found nulls in the targets collection.</exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.ReadUntil(System.Collections.Generic.IEnumerable{System.String},System.String@,System.Boolean)">
            <summary>
                Reads the underlying string advancing the current position until any of the provided strings is found or (if
                Greedy) to the end of the string is reached.
            </summary>
            <remarks>
                If the end of the string is not reached, the string found will be the next thing to be read afterwards. The
                string found is not included in the returned string.
            </remarks>
            <param name="targets">The string to look for.</param>
            <param name="found">The found string.</param>
            <param name="greedy">Whether or not to do a Greedy search.</param>
            <returns>The read string if found; otherwise <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The targets collection is null.</exception>
            <exception cref="T:System.ArgumentException">Found nulls in the targets collection.</exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.ReadUntil(System.Collections.Generic.IEnumerable{System.String},System.String@,System.StringComparison,System.Boolean)">
            <summary>
                Reads the underlying string advancing the current position until any of the provided strings is found or (if
                Greedy) to the end of the string is reached.
            </summary>
            <remarks>
                If the end of the string is not reached, the string found will be the next thing to be read afterwards. The
                string found is not included in the returned string.
            </remarks>
            <param name="targets">The string to look for.</param>
            <param name="found">The found string.</param>
            <param name="stringComparison">One of the enumeration values that specifies the rules for the search.</param>
            <param name="greedy">Whether or not to do a Greedy search.</param>
            <returns>The read string if found; otherwise <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The targets collection is null.</exception>
            <exception cref="T:System.ArgumentException">Found nulls in the targets collection.</exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.ReadUntil(System.Collections.Generic.IEnumerable{System.String},System.StringComparison,System.Boolean)">
            <summary>
                Reads the underlying string advancing the current position until any of the provided strings is found or (if
                Greedy) to the end of the string is reached.
            </summary>
            <remarks>
                If the end of the string is not reached, the string found will be the next thing to be read afterwards. The
                string found is not included in the returned string.
            </remarks>
            <param name="targets">The string to look for.</param>
            <param name="stringComparison">One of the enumeration values that specifies the rules for the search.</param>
            <param name="greedy">Whether or not to do a Greedy search.</param>
            <returns>The read string if found; otherwise <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The targets collection is null.</exception>
            <exception cref="T:System.ArgumentException">Found nulls in the targets collection.</exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.ReadUntil(System.String,System.Boolean)">
            <summary>
                Reads the underlying string advancing the current position until the provided string is found or (if Greedy) to the
                end of the string is reached.
            </summary>
            <remarks>
                If the end of the string is not reached, the provided string will be next thing to be read afterwards. The
                provided string is not included in the returned string.
            </remarks>
            <param name="target">The string to look for.</param>
            <param name="greedy">Whether or not to do a Greedy search.</param>
            <returns>The read string if found; otherwise <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The target string is null.</exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.ReadUntil(System.String,System.StringComparison,System.Boolean)">
            <summary>
                Reads the underlying string advancing the current position until the provided string is found or (if Greedy) to the
                end of the string is reached.
            </summary>
            <remarks>
                If the end of the string is not reached, the provided string will be next thing to be read afterwards. The
                provided string is not included in the returned string.
            </remarks>
            <param name="target">The string to look for.</param>
            <param name="stringComparison">One of the enumeration values that specifies the rules for the search.</param>
            <param name="greedy">Whether or not to do a Greedy search.</param>
            <returns>The read string if found; otherwise <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The target string is null.</exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.ReadUntilAfter(System.Char,System.Boolean)">
            <summary>
                Reads the underlying string advancing the current position until afterwards the provided character is found or (if
                Greedy) to the end of the string is reached.
            </summary>
            <remarks>
                If the end of the string is not reached, the provided character will be the next thing to be read afterwards.
                The provided character is not included in the returned string.
            </remarks>
            <param name="target">The character to look for.</param>
            <param name="greedy">Whether or not to do a Greedy search.</param>
            <returns>The read string.</returns>
        </member>
        <member name="M:Theraot.Core.StringProcessor.ReadUntilAfter(System.String,System.Boolean)">
            <summary>
                Reads the underlying string advancing the current position until afterwards the provided string is found or (if
                Greedy) to the end of the string is reached.
            </summary>
            <remarks>The provided string is included in the returned string.</remarks>
            <param name="target">The string to look for.</param>
            <param name="greedy">Whether or not to do a Greedy search.</param>
            <returns>The read string.</returns>
            <exception cref="T:System.ArgumentNullException">The target string is null.</exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.ReadUntilAfter(System.String,System.StringComparison,System.Boolean)">
            <summary>
                Reads the underlying string advancing the current position until afterwards the provided string is found or (if
                Greedy) to the end of the string is reached.
            </summary>
            <remarks>The provided string is included in the returned string.</remarks>
            <param name="target">The string to look for.</param>
            <param name="stringComparison">One of the enumeration values that specifies the rules for the search.</param>
            <param name="greedy">Whether or not to do a Greedy search.</param>
            <returns>The read string.</returns>
            <exception cref="T:System.ArgumentNullException">The target string is null.</exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.ReadWhile(System.Char)">
            <summary>
                Reads the underlying string advancing the current position as long as all the read characters match the provided
                character.
            </summary>
            <remarks>
                If the end of the string is not reached, the character that doesn't match the provided character will be the
                next thing to be read afterwards. The character that doesn't match the provider character is not included in the
                returned string.
            </remarks>
            <param name="target">The character to look for.</param>
            <returns>The read string.</returns>
        </member>
        <member name="M:Theraot.Core.StringProcessor.ReadWhile(System.Func{System.Char,System.Boolean})">
            <summary>
                Reads the underlying string advancing the current position as long as the characters pass the provided predicate.
            </summary>
            <remarks>
                If the end of the string is not reached, the character that doesn't pass the predicate will be the next thing
                to be read afterwards. The character that doesn't pass the predicate is not included in the returned string.
            </remarks>
            <param name="predicate">The predicate to test the characters.</param>
            <returns>The read string.</returns>
            <exception cref="T:System.ArgumentNullException">The predicate is null.</exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.ReadWhile(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
                Reads the underlying string advancing the current position as long as the read characters match the provided
                characters.
            </summary>
            <remarks>
                If the end of the string is not reached, the first character not found in the provided characters will be the
                the next thing to be read afterwards. The first character not found in the provided characters is not included in
                the returned string.
            </remarks>
            <param name="targets">The string to look for.</param>
            <returns>The read string.</returns>
            <exception cref="T:System.ArgumentNullException">The targets collection is null.</exception>
            <exception cref="T:System.ArgumentException">Found nulls in the targets collection.</exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.Skip(System.Func{System.Char,System.Boolean})">
            <summary>
                Checks the next character from the underlying string if it passes the predicate. If successful advances the
                character position by one character.
            </summary>
            <param name="predicate">The predicate to test the characters.</param>
            <returns><c>true</c>if the target was found; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The predicate is null.</exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.SkipBackBefore(System.Char,System.Boolean)">
            <summary>
                Reads the underlying string advancing the current position until afterwards the provided character is found or (if
                Greedy) to the start of the string is reached.
            </summary>
            <param name="target">The character to look for.</param>
            <param name="greedy">Whether or not to do a Greedy search.</param>
            <returns><c>true</c>if the target was found; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Theraot.Core.StringProcessor.SkipBackBefore(System.String,System.Boolean)">
            <summary>
                Reads the underlying string advancing the current position until afterwards the provided string is found or (if
                Greedy) to the start of the string is reached.
            </summary>
            <param name="target">The string to look for.</param>
            <param name="greedy">Whether or not to do a Greedy search.</param>
            <returns><c>true</c>if the target was found; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The target string is null.</exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.SkipBackBefore(System.String,System.StringComparison,System.Boolean)">
            <summary>
                Reads the underlying string advancing the current position until afterwards the provided string is found or (if
                Greedy) to the start of the string is reached.
            </summary>
            <param name="target">The string to look for.</param>
            <param name="stringComparison">One of the enumeration values that specifies the rules for the search.</param>
            <param name="greedy">Whether or not to do a Greedy search.</param>
            <returns><c>true</c>if the target was found; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The target string is null.</exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.SkipBackTo(System.Char,System.Boolean)">
            <summary>
                Reads the underlying string advancing the current position until afterwards the provided character is found or (if
                Greedy) to the start of the string is reached.
            </summary>
            <param name="target">The character to look for.</param>
            <param name="greedy">Whether or not to do a Greedy search.</param>
            <returns><c>true</c>if the target was found; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Theraot.Core.StringProcessor.SkipBackTo(System.String,System.Boolean)">
            <summary>
                Reads the underlying string advancing the current position until afterwards the provided string is found or (if
                Greedy) to the start of the string is reached.
            </summary>
            <param name="target">The string to look for.</param>
            <param name="greedy">Whether or not to do a Greedy search.</param>
            <returns><c>true</c>if the target was found; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The target string is null.</exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.SkipBackTo(System.String,System.StringComparison,System.Boolean)">
            <summary>
                Reads the underlying string advancing the current position until afterwards the provided string is found or (if
                Greedy) to the start of the string is reached.
            </summary>
            <param name="target">The string to look for.</param>
            <param name="stringComparison">One of the enumeration values that specifies the rules for the search.</param>
            <param name="greedy">Whether or not to do a Greedy search.</param>
            <returns><c>true</c>if the target was found; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The target string is null.</exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.SkipLine">
            <summary>
                Skips a line from the underlying string. If not Greedy will require a new line at the end of the string to be
                able to reach it.
            </summary>
            <returns><c>true</c>if the target was found; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Theraot.Core.StringProcessor.SkipUntil(System.Char,System.Boolean)">
            <summary>
                Skips the underlying string advancing the current position until the provided character is found or (if Greedy) to
                the end of the string is reached.
            </summary>
            <remarks>If the end of the string is not reached, the provided character will be the next thing to be read afterwards.</remarks>
            <param name="target">The character to look for.</param>
            <param name="greedy">Whether or not to do a Greedy search.</param>
            <returns><c>true</c>if the target was found; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Theraot.Core.StringProcessor.SkipUntil(System.Char[],System.Boolean)">
            <summary>
                Skips the underlying string advancing the current position until any of the provided characters is found or (if
                Greedy) to the end of the string is reached.
            </summary>
            <remarks>If the end of the string is not reached, the character found will be the next thing to be read afterwards.</remarks>
            <param name="targets">The string to look for.</param>
            <param name="greedy">Whether or not to do a Greedy search.</param>
            <returns><c>true</c>if the target was found; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The targets collection is null.</exception>
            <exception cref="T:System.ArgumentException">Found nulls in the targets collection.</exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.SkipUntil(System.Func{System.Char,System.Boolean})">
            <summary>
                Skips the underlying string advancing the current position until a character passes the provided predicate or (if
                Greedy) to the end of the string is reached.
            </summary>
            <remarks>
                If the end of the string is not reached, the character that passes the predicate will be the next thing to be
                read afterwards.
            </remarks>
            <param name="predicate">The predicate to test the characters.</param>
            <returns><c>true</c>if the target was found; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The predicate is null.</exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.SkipUntil(System.Collections.Generic.IEnumerable{System.Char},System.Boolean)">
            <summary>
                Skips the underlying string advancing the current position until any of the provided characters is found or (if
                Greedy) to the end of the string is reached.
            </summary>
            <remarks>If the end of the string is not reached, the character found will be the next thing to be read afterwards.</remarks>
            <param name="targets">The string to look for.</param>
            <param name="greedy">Whether or not to do a Greedy search.</param>
            <returns><c>true</c>if the target was found; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The targets collection is null.</exception>
            <exception cref="T:System.ArgumentException">Found nulls in the targets collection.</exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.SkipUntil(System.Collections.Generic.IEnumerable{System.String},System.String@,System.Boolean)">
            <summary>
                Skips the underlying string advancing the current position until any of the provided strings is found or (if
                Greedy) to the end of the string is reached.
            </summary>
            <remarks>If the end of the string is not reached, the string found will be the next thing to be read afterwards.</remarks>
            <param name="targets">The string to look for.</param>
            <param name="found">The found string.</param>
            <param name="greedy">Whether or not to do a Greedy search.</param>
            <returns><c>true</c>if the target was found; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The targets collection is null.</exception>
            <exception cref="T:System.ArgumentException">Found nulls in the targets collection.</exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.SkipUntil(System.Collections.Generic.IEnumerable{System.String},System.String@,System.StringComparison,System.Boolean)">
            <summary>
                Skips the underlying string advancing the current position until any of the provided strings is found or (if
                Greedy) to the end of the string is reached.
            </summary>
            <remarks>If the end of the string is not reached, the string found will be the next thing to be read afterwards.</remarks>
            <param name="targets">The string to look for.</param>
            <param name="found">The found string.</param>
            <param name="stringComparison">One of the enumeration values that specifies the rules for the search.</param>
            <param name="greedy">Whether or not to do a Greedy search.</param>
            <returns><c>true</c>if the target was found; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The targets collection is null.</exception>
            <exception cref="T:System.ArgumentException">Found nulls in the targets collection.</exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.SkipUntil(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
                Skips the underlying string advancing the current position until any of the provided strings is found or (if
                Greedy) to the end of the string is reached.
            </summary>
            <remarks>If the end of the string is not reached, the string found will be the next thing to be read afterwards.</remarks>
            <param name="targets">The string to look for.</param>
            <param name="greedy">Whether or not to do a Greedy search.</param>
            <returns><c>true</c>if the target was found; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The targets collection is null.</exception>
            <exception cref="T:System.ArgumentException">Found nulls in the targets collection.</exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.SkipUntil(System.Collections.Generic.IEnumerable{System.String},System.StringComparison,System.Boolean)">
            <summary>
                Skips the underlying string advancing the current position until any of the provided strings is found or (if
                Greedy) to the end of the string is reached.
            </summary>
            <remarks>If the end of the string is not reached, the string found will be the next thing to be read afterwards.</remarks>
            <param name="targets">The string to look for.</param>
            <param name="stringComparison">One of the enumeration values that specifies the rules for the search.</param>
            <param name="greedy">Whether or not to do a Greedy search.</param>
            <returns><c>true</c>if the target was found; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The targets collection is null.</exception>
            <exception cref="T:System.ArgumentException">Found nulls in the targets collection.</exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.SkipUntil(System.String,System.Boolean)">
            <summary>
                Skips the underlying string advancing the current position until the provided string is found or (if Greedy) to the
                end of the string is reached.
            </summary>
            <remarks>If the end of the string is not reached, the provided string will be next thing to be read afterwards.</remarks>
            <param name="target">The string to look for.</param>
            <param name="greedy">Whether or not to do a Greedy search.</param>
            <returns><c>true</c>if the target was found; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The target string is null.</exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.SkipUntil(System.String,System.StringComparison,System.Boolean)">
            <summary>
                Skips the underlying string advancing the current position until the provided string is found or (if Greedy) to the
                end of the string is reached.
            </summary>
            <remarks>If the end of the string is not reached, the provided string will be next thing to be read afterwards.</remarks>
            <param name="target">The string to look for.</param>
            <param name="stringComparison">One of the enumeration values that specifies the rules for the search.</param>
            <param name="greedy">Whether or not to do a Greedy search.</param>
            <returns><c>true</c>if the target was found; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The target string is null.</exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.SkipUntilAfter(System.Char,System.Boolean)">
            <summary>
                Reads the underlying string advancing the current position until afterwards the provided character is found or (if
                Greedy) to the end of the string is reached.
            </summary>
            <returns><c>true</c>if the target was found; otherwise <c>false</c>.</returns>
            <param name="target">The character to look for.</param>
            <param name="greedy">Whether or not to do a Greedy search.</param>
        </member>
        <member name="M:Theraot.Core.StringProcessor.SkipUntilAfter(System.String,System.Boolean)">
            <summary>
                Reads the underlying string advancing the current position until afterwards the provided string is found or (if
                Greedy) to the end of the string is reached.
            </summary>
            <param name="target">The string to look for.</param>
            <param name="greedy">Whether or not to do a Greedy search.</param>
            <returns><c>true</c>if the target was found; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The target string is null.</exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.SkipUntilAfter(System.String,System.StringComparison,System.Boolean)">
            <summary>
                Reads the underlying string advancing the current position until afterwards the provided string is found or (if
                Greedy) to the end of the string is reached.
            </summary>
            <param name="target">The string to look for.</param>
            <param name="stringComparison">One of the enumeration values that specifies the rules for the search.</param>
            <param name="greedy">Whether or not to do a Greedy search.</param>
            <returns><c>true</c>if the target was found; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The target string is null.</exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.SkipWhile(System.Char)">
            <summary>
                Skips the underlying string advancing the current position as long as all the read characters match the provided
                character.
            </summary>
            <remarks>
                If the end of the string is not reached, the character that doesn't match the provided character will be the
                next thing to be read afterwards.
            </remarks>
            <param name="target">The character to look for.</param>
            <returns><c>true</c>if the character position advanced; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Theraot.Core.StringProcessor.SkipWhile(System.Func{System.Char,System.Boolean})">
            <summary>
                Skips the underlying string advancing the current position as long as the characters pass the provided predicate.
            </summary>
            <remarks>
                If the end of the string is not reached, the character that doesn't pass the predicate will be the next thing
                to be read afterwards.
            </remarks>
            <param name="predicate">The predicate to test the characters.</param>
            <returns><c>true</c>if the character position advanced; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The predicate is null.</exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.SkipWhile(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
                Skips the underlying string advancing the current position as long as the read characters match the provided
                characters.
            </summary>
            <remarks>
                If the end of the string is not reached, the first character not found will be the next thing to be read
                afterwards.
            </remarks>
            <param name="targets">The string to look for.</param>
            <returns><c>true</c>if the character position advanced; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The targets collection is null.</exception>
            <exception cref="T:System.ArgumentException">Found nulls in the targets collection.</exception>
        </member>
        <member name="M:Theraot.Core.StringProcessor.TryPeek(System.Char@)">
            <summary>
                Attempts to read the next character from the string.
            </summary>
            <param name="character">The recovered character.</param>
            <returns>
                <c>true</c> if the character was recovered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.Core.StringProcessor.TryTake(System.Char@)">
            <summary>
                Attempts to read the next character from the string. If successful advances the character position by one
                character.
            </summary>
            <param name="character">The recovered character.</param>
            <returns>
                <c>true</c> if the character was recovered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Theraot.No.Op``1(``0)">
            <summary>
            This is an empty method, it that takes one value and discards it. Calls to it will not appear in release builds.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="arg">The value.</param>
        </member>
        <member name="T:Theraot.Threading.ReentryGuard">
            <summary>
                Represents a context to execute operation without reentry.
            </summary>
        </member>
        <member name="M:Theraot.Threading.ReentryGuard.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Theraot.Threading.ReentryGuard" /> class.
            </summary>
        </member>
        <member name="P:Theraot.Threading.ReentryGuard.IsTaken">
            <summary>
                Gets a value indicating whether or not the current thread did enter.
            </summary>
        </member>
        <member name="M:Theraot.Threading.ReentryGuard.Execute(System.Action)">
            <summary>
                Executes an operation-
            </summary>
            <param name="operation">The operation to execute.</param>
            <returns>Returns a promise to finish the execution.</returns>
        </member>
        <member name="M:Theraot.Threading.ReentryGuard.Execute``1(System.Func{``0})">
            <summary>
                Executes an operation-
            </summary>
            <typeparam name="T">The return value of the operation.</typeparam>
            <param name="operation">The operation to execute.</param>
            <returns>Returns a promise to finish the execution.</returns>
        </member>
    </members>
</doc>
